#version 440 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;

out VS_OUT{
out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoords;
out noperspective mat3 TBN;
out mat3 TBN2;
out vec3 wFragPos;
} vs_out;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 PrevModel;
uniform mat4 PrevView;
uniform mat3 invModelMatrix;
uniform mat3 invNormalMatrix;
uniform float time;
uniform int FrameNumber;
//uniform vec4 clipplane;


layout (std140, binding = 1) uniform CameraData_t
{
    vec4 position;
    vec4 direction;
    mat4 projection;
    mat4 view;
    mat4 invprojection;
    mat4 invview;
    int CurrentSelectedEntity; float padding2[3];
    float near; float padding0[3];
    float far; float padding1[3];
} CameraData;

vec3 T;
vec3 B;
vec3 N;

out vec4 PrevPosition;
out vec4 Position;
out flat int varCurrEnt;
mat3 CreateTBNMatrix(mat3 normalMatrix)
{
     T = normalize(normalMatrix * tangent);
     B = normalize(normalMatrix * bitangent);
     N = normalize(normalMatrix * normal);

    return transpose(mat3(T, B, N));
}

mat3 CreateTBNMatrix2(mat3 normalMatrix)
{
     T = normalize(normalMatrix * tangent);
     B = normalize(normalMatrix * bitangent);
     N = normalize(normalMatrix * normal);

    return transpose(mat3(T, B, N));
}


void main()
{
  varCurrEnt = CameraData.CurrentSelectedEntity;
  vec4 worldPos = model * vec4(position, 1.0);
  //gl_ClipDistance[0] = dot(worldPos, clipplane);

  mat4 ViewMatrix = CameraData.view;
  mat4 Projection = CameraData.projection;

  vec4 viewPos = ViewMatrix * worldPos;

  vs_out.FragPos = viewPos.xyz;
  vs_out.wFragPos = worldPos.xyz;
  Position = Projection * viewPos;
  gl_Position = Projection * viewPos;
  PrevPosition = Projection * PrevView * PrevModel * vec4(position, 1.0);
  vs_out.TexCoords = vertexUV;
  
  mat3 normalMatrix = invModelMatrix;//transpose(inverse(mat3(model)));
  vs_out.TBN = CreateTBNMatrix(normalMatrix);
  vs_out.Normal = normalize(normalMatrix * normalize(normal));
  normalMatrix = invNormalMatrix;//transpose(inverse(mat3(view * model)));
  vs_out.TBN2 = CreateTBNMatrix(normalMatrix);
}
