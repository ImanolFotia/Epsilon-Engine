#version 440 core

layout(location = 0) out vec3 gAlbedoSpec;
layout(location = 1) out vec4 gExpensiveNormal;
layout(location = 2) out vec4 gDepth;
layout(location = 3) out vec4 gExtraComponents; 
layout(location = 4) out vec3 gLightAccumulation;

layout (binding = 0) uniform sampler2D texture0;
layout (binding = 1) uniform sampler2D texture1;

in vec3 Normal;
in vec2 TexCoords;



const float Pi = 3.141592654f;
const float CosineA0 = Pi;
const float CosineA1 = (2.0f * Pi) / 3.0f;
const float CosineA2 = Pi * 0.25f;
// scale for restored amount of lighting
uniform float u_scaleFactor = 0.5;

struct SphericalHarmonicsFormat {
  vec3 u_L00; 
  vec3 u_L1m1;
  vec3 u_L10;
  vec3 u_L11;
  vec3 u_L2m2;
  vec3 u_L2m1;
  vec3 u_L20;
  vec3 u_L21;
  vec3 u_L22;
};

layout(std430, binding = 1) buffer AmbientLightSSBO
{
    //SphericalHarmonicsFormat ambientProbes[];

        vec3 u_L00; float padding0;
        vec3 u_L1m1; float padding1;
        vec3 u_L10; float padding2;
        vec3 u_L11; float padding3;
        vec3 u_L2m2; float padding4;
        vec3 u_L2m1; float padding5;
        vec3 u_L20; float padding6;
        vec3 u_L21; float padding7;
        vec3 u_L22; float padding8;

} lp;

const float C1 = 0.429043;
const float C2 = 0.511664;
const float C3 = 0.743125;
const float C4 = 0.886227;
const float C5 = 0.247708;

vec3 sphericalHarmonics(vec3 N)
{
   return
      // band 0, constant value, details of lowest frequency
      C4 * lp.u_L00 +

      // band 1, oriented along main axes
      2.0 * C2 * lp.u_L11 * N.x +
      2.0 * C2 * lp.u_L1m1 * N.y +
      2.0 * C2 * lp.u_L10 * N.z +

      // band 2, values depend on multiple axes, higher frequency details
      C1 * lp.u_L22 * (N.x * N.x - N.y * N.y) +
      C3 * lp.u_L20 * N.z * N.z - C5 * lp.u_L20 +
      2.0 * C1 * lp.u_L2m2 * N.x * N.y +
      2.0 * C1 * lp.u_L21 * N.x * N.z +
      2.0 * C1 * lp.u_L2m1 * N.y * N.z;
}
in mat3 TBN;

void main()
{
	if(texture(texture0, TexCoords).a < 0.4) discard;

	vec3 NormalTexture = normalize(texture(texture1, TexCoords).rgb * 2.0 - 1.0);
	gAlbedoSpec = texture(texture0, TexCoords).rgb;

  	int negator = ( int(gl_FrontFacing) * 2 - 1 );
  	gExpensiveNormal.rgb =  negator * normalize(NormalTexture * TBN);
	gExpensiveNormal.a = 1.0;

	gDepth.x = gl_FragCoord.z;
	gDepth.yzw = vec3(0.0);
	gExtraComponents = vec4(0.0, 0.0, 0.0, 0.0);
	gLightAccumulation = sphericalHarmonics(normalize(gExpensiveNormal.rgb));
}