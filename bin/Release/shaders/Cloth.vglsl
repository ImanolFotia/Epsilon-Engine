#version 440 core
layout(location = 0) in vec3 position;
layout(location = 1) in vec2 texcoords;
layout(location = 2) in vec3 normal;

uniform mat4 MVP;
uniform mat4 Model;
out mat3 TBN;
vec3 tangent;
vec3 bitangent;
out vec3 Normal;
out vec2 TexCoords;

vec3 T;
vec3 B;
vec3 N;

mat3 CreateTBNMatrix(mat3 normalMatrix)
{
     T = normalize(normalMatrix * tangent);
     B = normalize(normalMatrix * bitangent);
     N = normalize(normalMatrix * normal);

    return transpose(mat3(T, B, N));
}

void main()
{

	gl_Position = MVP * vec4(position, 1.0);
	Normal = normal; 
	TexCoords = texcoords;

	vec3 c1 = cross(normal, vec3(0.0, 0.0, 1.0));
	vec3 c2 = cross(normal, vec3(0.0, 1.0, 0.0));

	//if (length(c1)>length(c2))
	//{
	    tangent = c1;
	//}
	//else
	//{
	//    tangent = c2;
	//}

	tangent = normalize(tangent);

	bitangent = cross(normal, tangent);
	bitangent = normalize(bitangent);

  	mat3 normalMatrix = transpose(inverse(mat3(Model)));
	TBN = CreateTBNMatrix(normalMatrix);
	
}