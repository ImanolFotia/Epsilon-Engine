#version 440 core

uniform sampler2D gFinalImage;
uniform sampler2D gNormal;
uniform sampler2D gExtraComponents;
uniform sampler2D gDepth; 
uniform sampler2D BRDF;
uniform sampler2D noiseTexture;
uniform sampler2D PreviousReflection;

uniform mat4 invView;
uniform mat4 projection;
uniform mat4 invprojection;
uniform mat4 view;
uniform vec3 camDir;
uniform vec3 camPos;
uniform vec2 Resolution;
uniform float Time;
uniform int ID;
uniform bool isMoving;
noperspective in vec2 TexCoords;

out vec4 outColor;

const float rayStep = 0.1;
const float minRayStep = 0.1;
const float maxSteps = 35;
const float searchDist = 5;
const float searchDistInv = 0.2;
const int numBinarySearchSteps = 5;
const float maxDDepth = 1.0;
const float maxDDepthInv = 1.0;
const float reflectionSpecularFalloffExponent = 3.0;

float Metallic;

#define Scale vec3(.8, .8, .8)
#define K 19.19

vec3 PositionFromDepth(float depth);

vec3 BinarySearch(inout vec3 dir, inout vec3 hitCoord, inout float dDepth);
 
vec4 RayCast(vec3 dir, inout vec3 hitCoord, out float dDepth);

vec3 fresnelSchlick(float cosTheta, vec3 F0);

vec3 hash(vec3 a);

vec3 hash31(float a)
{
   vec3 p3 = fract(vec3(a) * Scale);
   p3 += dot(p3, p3.yzx+K);
   return fract((p3.xxy+p3.yzz)*p3.zyx); 
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
} 


float near = 0.1;
float far = 3000.0;
uniform vec2 LinMAD;

float ViewSpaceZFromDepth(float d)
{
    // [0,1] -> [-1,1] clip space
    d = d * 2.0 - 1.0;

    // Get view space Z
    return -1.0 / (LinMAD.x * d + LinMAD.y);
}

uniform int SSROn;

void main()
{

    vec4 PrevReflection = texture(PreviousReflection, TexCoords);

    if(ID > 251){
    	outColor = PrevReflection;
    	return;
    }

    if(ID == 251){
    	outColor = PrevReflection / 251;
    	return;
    }


    vec2 MetallicEmmissive = texture(gExtraComponents, TexCoords).rg;
    Metallic = MetallicEmmissive.r;

    if(Metallic <= 0.01){
        outColor = vec4(0.0);
        return;
    }
 
    vec3 worldNormal = normalize(vec3(texture(gNormal, TexCoords)));
    vec3 seed = vec3(TexCoords, 1.0);
    vec3 viewNormal = vec3(vec4(worldNormal, 1.0) * invView);
    vec3 viewPos = PositionFromDepth( texture(gDepth, TexCoords).x);
    vec3 worldPos = vec3(invView * vec4(viewPos, 1.0));
    //vec3 albedo = texture(gAlbedo, TexCoords).rgb;

    //vec3 WorldPos = vec3(vec4(viewPos, 1.0) * invView);

    vec3 viewDir = normalize(camPos - worldPos);

    float spec = texture(gNormal, TexCoords).w;

    vec3 F0 = vec3(0.04); 
    F0      = mix(F0, vec3(0.5), Metallic);
    vec3 Fresnel = fresnelSchlickRoughness(max(dot(worldNormal, viewDir), 0.0), F0, spec);

    vec3 hitPos = viewPos;
    float dDepth;

    vec3 kS = Fresnel;
    vec3 kD = 1.0 - kS;
    kD *= 1.0 - Metallic;   
 
    vec3 q = hitPos * 2.0 - 1.0;
    //q.x = 16.0/9.0;
    //vec3 jitt = normalize(hash(q)) * spec;
    // Reflection vector
    vec3 reflected = normalize(reflect(normalize(viewPos), normalize(viewNormal)));
    vec3 samples = vec3(0.0);
    float screenEdgefactor;
    float ReflectionMultiplier;
    vec3 hs = vec3(0.0);
    bool selfReflection = dot(reflected, normalize(viewPos)) > 0.1;
    vec4 coords;
    vec2 dCoords;
        //jitt.x *= 16.0/9.0;
        vec3 SSR;
        int mask = 0;
        vec2 brdf  = texture(BRDF, vec2(max(dot(worldNormal, viewDir), 0.0), spec)).rg;
        
        if(SSROn == 1 && selfReflection){

            //for(int i = 0; i < 2; i++){
            vec2 NoiseScale = Resolution / 4.0;
            vec3 wp = vec3(vec4(viewPos, 1.0) * invView);
            vec3 random = vec3(texture(noiseTexture, (TexCoords.xy*2.0) + Time).rgb);
            //random = vec3(random.x);
            float factor = spec*0.20;
            hs = hash(wp*Time);
            hs = random;
            hs.x += /*sin(Time)*/-0.5;
            //hs = normalize(hs * 2.0-1.0);
            hs.x *= 0.5;
            vec3 jitt = mix(vec3(0.0), hs, factor);
            //jitt = normalize(jitt);
            coords = RayCast((jitt + reflected) * max(minRayStep, -viewPos.z), hitPos, dDepth);
         
            dCoords = smoothstep(0.2, 0.6, abs(vec2(0.5, 0.5) - coords.xy));
         
         
            screenEdgefactor = clamp(1.0 - (dCoords.x + dCoords.y), 0.0, 1.0);

            samples += textureLod(gFinalImage, coords.xy, 0).rgb;
        //}
                ReflectionMultiplier =  
                        screenEdgefactor * 
                        -reflected.z;
        //samples = samples * 0.5;
        // Get color
        vec3 hN = texture(gNormal, coords.xy).xyz;
        float VNvector = dot(hN, viewDir);

        SSR = mix(     samples*clamp(ReflectionMultiplier, 0.0, 1.0), 
                            texture(gDepth, TexCoords).gba, 
                            clamp(1.0-(screenEdgefactor*(2.0*-reflected.z) * VNvector), 0.0, 1.0));
        
        mask = int(clamp((screenEdgefactor*(2.0-reflected.z)), 0.0, 1.0));

        if(spec < 0.05) mask = 0;
    }
    else
    {
        SSR = texture(gDepth, TexCoords, 0).gba;
        mask = 0;
    }
    //SSR = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 0.0, 1.0), clamp(1.0-(screenEdgefactor*(2.0*-reflected.z)), 0.0, 1.0)) * Fresnel;
    outColor = vec4(SSR * (Fresnel * brdf.x + brdf.y), mask);

    //outColor = ID == 1 ? vec4(1.0, 0.0 , 0.0, 1.0) : vec4(0.0, 1.0, 0.0, 1.0);//(outColor + PrevReflection) / 2.0;
    //outColor += ID == 1 ? vec4(1.0, 0.0 , 0.0, 1.0) : vec4(0.0, 1.0, 0.0, 1.0);
    if(!isMoving && ID <= 250)
    	outColor = outColor + PrevReflection;

    //outColor /= ID;
    //outColor = selfReflection ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 1.0, 0.0, 1.0); 
}

vec3 PositionFromDepth(float depth) {
    float z = depth * 2.0 - 1.0;

    vec4 clipSpacePosition = vec4(TexCoords * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = invprojection * clipSpacePosition;

    // Perspective division
    viewSpacePosition /= viewSpacePosition.w;

    return viewSpacePosition.xyz;
}

vec3 BinarySearch(inout vec3 dir, inout vec3 hitCoord, inout float dDepth)
{
    float depth;

    vec4 projectedCoord;
 
    for(int i = 0; i < numBinarySearchSteps; i++)
    {

        projectedCoord = projection * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;
 
        //depth = texture(gPosition, projectedCoord.xy, 2.0).x;
        //depth = PositionFromDepth(textureLod(gDepth, projectedCoord.xy, 3.0).x).z;
        depth = ViewSpaceZFromDepth(textureLod(gDepth, projectedCoord.xy, 1.0).x);
        dDepth = hitCoord.z - depth;

        dir *= 0.5;

        hitCoord += (dDepth > 0.0) ? dir : -dir;
    }

        projectedCoord = projection * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;
 
    return vec3(projectedCoord.xy, depth);
}

vec4 RayCast(vec3 dir, inout vec3 hitCoord, out float dDepth)
{

    dir *= rayStep;
 
 
    float depth;
    int steps;
    vec4 projectedCoord;

 
    for(int i = 0; i < maxSteps; i++)
    {
        hitCoord += dir;
 
        projectedCoord = projection * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;
 
        //depth = texture(gPosition, projectedCoord.xy, 2.0).x;
        //depth = PositionFromDepth(textureLod(gDepth, projectedCoord.xy, 3.0).x).z;
        depth = ViewSpaceZFromDepth(textureLod(gDepth, projectedCoord.xy, 1.0).x);

        if(depth > 1000.0){
            continue;
        }
 
        dDepth = hitCoord.z - depth;

        if((dir.z - dDepth) < 1.0){
            if(dDepth <= 0.0){   
                vec4 Result;
                Result = vec4(BinarySearch(dir, hitCoord, dDepth), 1.0);

                return Result;
            }
        }
        
        steps++;
    }
 
    if(depth>1000)
        return vec4(projectedCoord.xy, 0.0, 0.0);
    else
        return vec4(0.0);
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}


vec3 hash(vec3 a)
{
    a = fract(a * Scale);
    a += dot(a, a.yxz + K);
    return fract((a.xxy + a.yxx)*a.zyx);
}