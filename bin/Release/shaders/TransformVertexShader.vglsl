#version 440 core
//#pragma optionNV unroll all
layout(location = 0) in vec3 position;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;

out VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 UV;
} vs_out;

out mat3 oTBN;
out float visibility;


out vec3 TangentLightPos[4];
out vec3 TangentLightdir;
out vec3 TangentViewPos;
out vec3 TangentFragPos;
out vec3 TangentViewDir;
out vec3 worldNormal;
struct PointLight
{
    vec3 position;

    float constant;
    float linear;
    float quadratic;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};


uniform PointLight pointLights[4];

uniform mat4 MVP;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat3 MV3x3;
uniform vec3 viewPos;
uniform vec3 viewDir;
uniform int plane;
uniform int clip_Direction;
uniform vec3 LightDirection;

const float density = 0.004;
const float gradient = 3.5;
vec3 T;
vec3 B;
vec3 N;

out vec3 cubeCoords;
uniform vec4 clipplane;
mat3 CreateTBNMatrix(mat3 normalMatrix)
{
     T = normalize(normalMatrix * tangent);
     B = normalize(normalMatrix * bitangent);
     N = normalize(normalMatrix * normal);

    return transpose(mat3(T, B, N));
}

void main(){

	gl_Position =  projection * view * model * vec4(position,1.0);

  cubeCoords = position;

	vs_out.FragPos = vec3(model * vec4(position, 1.0f));

    gl_ClipDistance[0] = dot(model * vec4(position, 1.0f), clipplane);
	mat3 normalMatrix = transpose(inverse(mat3(model)));
    vs_out.Normal = normalize(normalMatrix * normal);

    vec4 WorldPosition = model * vec4(position, 1.0);

    vec4 PosToCam = view * WorldPosition;
	mat3 TBN = CreateTBNMatrix(normalMatrix);

    oTBN = TBN;

    TangentViewDir = TBN * viewDir;


    TangentViewPos = TBN * viewPos;
    TangentFragPos = TBN * vs_out.FragPos;
    vec3 lightdirection = vec3(0.0, -0.8, -0.5);

    TangentLightdir = TBN * LightDirection;

    for(int i = 0 ; i < 4 ; i++)
	TangentLightPos[i] = TBN * pointLights[i].position;

	float distance = length(PosToCam);

	visibility = exp(-pow((distance*density), gradient));

	vs_out.UV = vertexUV;


}
