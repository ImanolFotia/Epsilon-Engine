#version 430 core



layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 blurImage;

in vec2 TexCoords;
in vec4 clipSpace;;
uniform vec3 viewPos;
in float visibility;
in vec3 FragPos;
in vec3 wFragPos;
in mat3 TBN;
in mat3 TBN2;

layout (binding = 0) uniform sampler2D ColorBuffer;
layout (binding = 1) uniform sampler2D normalSampler;
layout (binding = 2) uniform sampler2D DuDvSampler;
layout (binding = 3) uniform sampler2D gDepth;
layout (binding = 4) uniform samplerCube Reflection;

uniform float time;
uniform vec3 lightDir;

vec4 SkyColor = vec4(0.5,0.5,0.5, 1.0);
vec3 NightFog = vec3(0.1,0.1,0.1);
    vec3 lightcolor = normalize(vec3(250, 190, 108));

    const float density = 0.003;
    const float gradient = 1.5;

in vec3 Normal;

vec4 hash4( vec2 p ) { return fract(sin(vec4( 1.0+dot(p,vec2(37.0,17.0)), 
                                              2.0+dot(p,vec2(11.0,47.0)),
                                              3.0+dot(p,vec2(41.0,29.0)),
                                              4.0+dot(p,vec2(23.0,31.0))))*103.0); }

vec4 textureNoTile( sampler2D samp, in vec2 uv )
{
    ivec2 iuv = ivec2( floor( uv ) );
     vec2 fuv = fract( uv );

    // generate per-tile transform
    vec4 ofa = hash4( iuv + ivec2(0,0) );
    vec4 ofb = hash4( iuv + ivec2(1,0) );
    vec4 ofc = hash4( iuv + ivec2(0,1) );
    vec4 ofd = hash4( iuv + ivec2(1,1) );
    
    vec2 ddx = dFdx( uv );
    vec2 ddy = dFdy( uv );

    // transform per-tile uvs
    ofa.zw = sign( ofa.zw-0.5 );
    ofb.zw = sign( ofb.zw-0.5 );
    ofc.zw = sign( ofc.zw-0.5 );
    ofd.zw = sign( ofd.zw-0.5 );
    
    // uv's, and derivatives (for correct mipmapping)
    vec2 uva = uv*ofa.zw + ofa.xy, ddxa = ddx*ofa.zw, ddya = ddy*ofa.zw;
    vec2 uvb = uv*ofb.zw + ofb.xy, ddxb = ddx*ofb.zw, ddyb = ddy*ofb.zw;
    vec2 uvc = uv*ofc.zw + ofc.xy, ddxc = ddx*ofc.zw, ddyc = ddy*ofc.zw;
    vec2 uvd = uv*ofd.zw + ofd.xy, ddxd = ddx*ofd.zw, ddyd = ddy*ofd.zw;
        
    // fetch and blend
    vec2 b = smoothstep( 0.25,0.75, fuv );
    
    return mix( mix( textureGrad( samp, uva, ddxa, ddya ), 
                     textureGrad( samp, uvb, ddxb, ddyb ), b.x ), 
                mix( textureGrad( samp, uvc, ddxc, ddyc ),
                     textureGrad( samp, uvd, ddxd, ddyd ), b.x), b.y );
}

uniform int ResX;
uniform int ResY;

float NEAR = 0.1;
float FAR = 3000.0;
float LinearizeDepth(float depth)
{
    float z = depth * 2.0 - 1.0; // Back to NDC
    return ((2.0 * NEAR * FAR) / (FAR + NEAR - z * (FAR - NEAR)));
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - clamp(cosTheta, 0.0, 1.0), 5.0);
}

void main()
{

    vec2 iResolution = vec2(ResX, ResY);
    float moveFactor = 0.04 * time;
    float distStrenght =  0.05;
    vec2 ndc = gl_FragCoord.xy/iResolution;//(clipSpace.xy / clipSpace.w);
    //ndc = ndc*2.0-1.0;
    //ndc.x *= iResolution.x/iResolution.y;

    vec2 refracCoords = ndc;

    vec2 distortion1 = (textureNoTile(DuDvSampler,vec2(TexCoords.x + moveFactor, TexCoords.y - moveFactor)).rg) * distStrenght;
    vec2 distortion2 = (textureNoTile(DuDvSampler,vec2(TexCoords.x + moveFactor, TexCoords.y + moveFactor)).rg) * distStrenght;
    vec2 finalDist = distortion1 - distortion2;
    vec3 normaltex = textureNoTile(normalSampler, TexCoords + finalDist).xyz;
    normaltex = normalize(vec3(normaltex.r * 2.0 - 1.0, normaltex.b, normaltex.g *2.0 - 1.0));

    float floorDistance = texture(gDepth, refracCoords).r;
    floorDistance = LinearizeDepth(floorDistance);

    refracCoords += finalDist;
    refracCoords = clamp(refracCoords, 0.0001, 1.0);

    vec3 viewDir = normalize(viewPos - wFragPos);

    vec3 tangent = vec3(1.0,0.0, 0.0);
    vec3 bitangent = vec3(-1.0, 0.0, 0.0);
    vec3 normal = vec3(0.0, 1.0, 0.0);

    vec3 n = normaltex;
    vec3 light = vec3(0.5, -0.8, 0.5);

    vec3 halfway = normalize(-lightDir + viewDir);

    
    vec3 reflectDir = normalize(reflect(-light, n));  
    vec3 spec = vec3(pow(max(dot(reflectDir, viewDir), 0.0), 128));

    vec2 textureResolution = iResolution;
    vec2 uv = refracCoords*textureResolution + 0.5;
    vec2 iuv = floor( uv );
    vec2 fuv = fract( uv );
    uv = iuv + fuv*fuv*(3.0-2.0*fuv); // fuv*fuv*fuv*(fuv*(fuv*6.0-15.0)+10.0);;
    uv = (uv - 0.5)/textureResolution;
    //vec3 colB = texture( iChannel0, uv ).xyz;


    float depth = gl_FragCoord.z;
    float waterDistance = LinearizeDepth(depth);
    float waterDepth = floorDistance - waterDistance;

    vec3 refractionColor = texture(ColorBuffer, uv, 0).rgb;

    vec3 ref = texture(Reflection, normalize(reflect(n, -viewDir)), 0.0).rgb;

    vec3 F = fresnelSchlick(max(dot(vec3(0, 1, 0), viewDir), 0.0), vec3(0.04));
    FragColor.rgb = mix(refractionColor, normalize(vec3(41, 88, 85))*0.0025, max(clamp(waterDepth/15.0, 0.0, 0.8), F.x)) + spec;
    //FragColor.rgb = mix(ref, refractionColor, F);//normalize(mix(refractionColor, ref, F) + normalize(vec3(41, 88, 85))*0.05);
    //FragColor.rgb = clamp(FragColor.rgb, vec3(0.005), vec3(1.0));
    FragColor.a = 1.0;

    blurImage = vec4(spec*0.1, 1.0);



}
