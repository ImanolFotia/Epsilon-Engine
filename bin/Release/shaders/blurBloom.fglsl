#version 330 core
out vec4 FragColor;
in vec2 TexCoords;

uniform sampler2D image;
uniform bool horizontal;
uniform bool cheap;

uniform float weights[11] = float[] (0.082607, 0.080977, 0.076276, 0.069041, 0.060049, 0.050187, 0.040306, 0.031105, 0.023066, 0.016436, 0.0);

const float weight2[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);


vec3 Gamma(in vec3 img) {
    return pow(img, vec3(1.0/2.2));
}
   
vec3 Degamma(in vec3 img) {
    return pow(img, vec3(2.2));
}

void main()
{
    vec3 result = vec3(0.0);
    if(cheap){
     vec2 tex_offset = 1.0 / textureSize(image, 0); // gets size of single texel
     vec3 sample1 = texture(image, TexCoords).rgb;
     result = sample1 * weight2[0];
     float multiplier = dot(sample1.rgb, vec3(0.2126, 0.7152, 0.0722)) * 1.001;
     if(horizontal)
     {
         for(int i = 1; i < 5; ++i)
         {
            result += (texture(image, TexCoords + vec2(tex_offset.x * i, 0.0)).rgb * (weight2[i]));
            result += (texture(image, TexCoords - vec2(tex_offset.x * i, 0.0)).rgb * (weight2[i]));
         }
     }
     else
     {
         for(int i = 1; i < 5; ++i)
         {
             result += (texture(image, TexCoords + vec2(0.0, tex_offset.y * i)).rgb * weight2[i]);
             result += (texture(image, TexCoords - vec2(0.0, tex_offset.y * i)).rgb * weight2[i]);
         }
     }
 }
 else {     
    vec2 tex_offset = 1.0 / textureSize(image, 0); // gets size of single texel
     vec3 sample1 = texture(image, TexCoords).rgb * weights[0];
     result = sample1;
     float multiplier = dot(sample1.rgb, vec3(0.2126, 0.7152, 0.0722)) * 1.001;
     if(horizontal)
     {
         for(int i = 1; i < 11; ++i)
         {
            result += (texture(image, TexCoords + vec2(tex_offset.x * i, 0.0)).rgb * (weights[i]));
            result += (texture(image, TexCoords - vec2(tex_offset.x * i, 0.0)).rgb * (weights[i]));
         }
     }
     else
     {
         for(int i = 1; i < 11; ++i)
         {
             result += (texture(image, TexCoords + vec2(0.0, tex_offset.y * i)).rgb * (weights[i]));
             result += (texture(image, TexCoords - vec2(0.0, tex_offset.y * i)).rgb * (weights[i]));
         }
     }
 }
     FragColor = vec4(result, 1.0);
 
}
