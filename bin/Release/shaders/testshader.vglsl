#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec2 UV;
layout (location = 2) in vec3 normal;
layout (location = 3) in vec3 tangent;
layout (location = 4) in vec3 bitangent;

out vec2 TexCoord;
out float visibility;
out float underWatervisibility;
out vec3 Normal;
out vec3 FragPos;

out vec3 TangentViewDir;
out vec3 TangentViewPos;
out vec3 TangentFragPos;
out vec3 TangentLightdir;
out vec3 otangent;

uniform mat4 MVP;
uniform mat4 view;
uniform mat4 model;
uniform vec3 viewPos;
uniform vec3 viewDir;
uniform vec3 LightDirection;
uniform mat4 projection;

const float density = 0.01;
const float gradient = 3.5;

const float underWaterdensity = 0.08;
const float underWatergradient = 0.7;

vec3 T;
vec3 B;
vec3 N;

mat3 CreateTBNMatrix(mat3 normalMatrix)
{
     T = normalize(normalMatrix * tangent);
     B = normalize(normalMatrix * bitangent);
     N = normalize(normalMatrix * normal);

    return transpose(mat3(T, B, N));
}

    vec3 lightdirection = vec3(0.0, -0.8, -0.5);
void main()
{
    gl_Position = projection * view * model * vec4(position, 1.0f);

    vec4 WorldPosition = model * vec4(position, 1.0);

    mat3 normalMatrix = transpose(inverse(mat3(model)));

    mat3 TBN = CreateTBNMatrix(normalMatrix);

    FragPos = vec3(model * vec4(position, 1.0f));

    TangentViewDir = TBN * viewDir;
    TangentViewPos = TBN * viewPos;
    TangentFragPos = TBN * FragPos;
    TangentLightdir = TBN * LightDirection;

    otangent = tangent;

    Normal = normalize(normalMatrix * normal);

    vec4 WorldToCam = view * WorldPosition;

    float distance = length(WorldToCam);


    visibility = exp(-pow((distance*density), gradient));

    underWatervisibility = exp(-pow((distance*underWaterdensity), underWatergradient));

    TexCoord = UV/5;
}
