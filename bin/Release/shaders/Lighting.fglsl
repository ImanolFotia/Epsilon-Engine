#version 450 core

in vec2 TexCoords;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 blurImage;

layout (binding = 0) uniform sampler2D gDepth;
layout (binding = 1) uniform sampler2D gNormal;
layout (binding = 2) uniform sampler2D gAlbedoSpec;
layout (binding = 3) uniform sampler2D ssaoColorBufferBlur;
layout (binding = 4) uniform sampler2DShadow shadowMap;
layout (binding = 5) uniform sampler2D gExtraComponents;
layout (binding = 6) uniform sampler2D gLightAccumulation; 
layout (binding = 7) uniform samplerCube gPointShadowMap; 
layout (binding = 8) uniform sampler2D SSGI; 

uniform float exposure;
uniform mat4 lightSpaceMatrix;
uniform vec3 viewPos;
uniform vec3 lightDir;
uniform bool hdr;
uniform int NUMLIGHTS;
const int NR_LIGHTS = 32;
uniform float time;
uniform float far_plane;
//uniform vec3 LightPositions[NR_LIGHTS];
struct t_light {

        vec4 position; // 4/*
        vec4 direction; // 8
        vec4 color; // 12
        float radius; float padding0[3]; // 13
        float watts;  float padding1[3]; // 14
        int type;     float padding2[3];//15*/
    };

layout(std430, binding = 0) buffer ssbo
 {
    t_light Lights[];

 } outBuffer;


layout (std140, binding = 1) uniform CameraData_t
{
    vec4 position;
    vec4 direction;
    mat4 projection;
    mat4 view;
    mat4 invprojection;
    mat4 invview;
    int CurrentSelectedEntity; float padding2[3];
    float near; float padding0[3];
    float far; float padding1[3];
} CameraData;

uniform mat4 projection;
uniform vec3 uViewDir;
uniform mat4 view;
uniform mat4 uView;

const float gamma = 2.2;
const float shadowDistance = 100.0f;
const float fadeDistance = 10.0f;
const vec3 SkyColor = normalize(vec3(70, 158, 116));//normalize(vec3(186,162,135));

const vec3 SkyColor0 = normalize(vec3(205, 109, 39));
const vec3 SkyColor1 = normalize(vec3(256, 75, 20));
const float density = 0.0003;
const float gradient = 1.5;

vec3 FragPos;
vec3 Normal;
vec3 Diffuse;
float Specular;
float Depth;
vec3 ambient;
vec3 SpecDiff;
float AmbientOcclusion;
float shadow = 0.0;
vec4 ExtraComponents;
vec3 F0;

#include <PBRFunctions.glsl>

#define Scale vec3(0.3, 0.1, 0.1)
#define K 19.19

vec3 hash(vec3 p3)
{
  p3 = fract(p3 * Scale);
    p3 += dot(p3, p3.yxz+19.19);
    return fract((p3.xxy + p3.yxx)*p3.zyx);

}

vec3 noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
  
    return mix(mix(mix( hash(p+vec3(0,0,0)), 
                        hash(p+vec3(1,0,0)),f.x),
                   mix( hash(p+vec3(0,1,0)), 
                        hash(p+vec3(1,1,0)),f.x),f.y),
               mix(mix( hash(p+vec3(0,0,1)), 
                        hash(p+vec3(1,0,1)),f.x),
                   mix( hash(p+vec3(0,1,1)), 
                        hash(p+vec3(1,1,1)),f.x),f.y),f.z);
}

const mat3 m = mat3( 0.00,  0.80,  0.60,
                    -0.80,  0.36, -0.48,
                    -0.60, -0.48,  0.64 );
vec3 fbm(in vec3 q)
{
            vec3    f  = 0.5000*noise( q ); q = m*q*2.01;
                    f += 0.2500*noise( q ); q = m*q*2.02;
                    f += 0.1250*noise( q ); q = m*q*2.03;
                    f += 0.0625*noise( q ); q = m*q*2.04;  
                    f += 0.03125*noise( q ); q = m*q*2.05; 
                    //f += 0.015625*noise( q ); q = m*q*2.06; 
    return vec3(f);
}

vec2 poissonDisk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

const vec2 BlueNoiseInDisk[64] = vec2[64](
    vec2(0.478712,0.875764),
    vec2(-0.337956,-0.793959),
    vec2(-0.955259,-0.028164),
    vec2(0.864527,0.325689),
    vec2(0.209342,-0.395657),
    vec2(-0.106779,0.672585),
    vec2(0.156213,0.235113),
    vec2(-0.413644,-0.082856),
    vec2(-0.415667,0.323909),
    vec2(0.141896,-0.939980),
    vec2(0.954932,-0.182516),
    vec2(-0.766184,0.410799),
    vec2(-0.434912,-0.458845),
    vec2(0.415242,-0.078724),
    vec2(0.728335,-0.491777),
    vec2(-0.058086,-0.066401),
    vec2(0.202990,0.686837),
    vec2(-0.808362,-0.556402),
    vec2(0.507386,-0.640839),
    vec2(-0.723494,-0.229240),
    vec2(0.489740,0.317826),
    vec2(-0.622663,0.765301),
    vec2(-0.010640,0.929347),
    vec2(0.663146,0.647618),
    vec2(-0.096674,-0.413835),
    vec2(0.525945,-0.321063),
    vec2(-0.122533,0.366019),
    vec2(0.195235,-0.687983),
    vec2(-0.563203,0.098748),
    vec2(0.418563,0.561335),
    vec2(-0.378595,0.800367),
    vec2(0.826922,0.001024),
    vec2(-0.085372,-0.766651),
    vec2(-0.921920,0.183673),
    vec2(-0.590008,-0.721799),
    vec2(0.167751,-0.164393),
    vec2(0.032961,-0.562530),
    vec2(0.632900,-0.107059),
    vec2(-0.464080,0.569669),
    vec2(-0.173676,-0.958758),
    vec2(-0.242648,-0.234303),
    vec2(-0.275362,0.157163),
    vec2(0.382295,-0.795131),
    vec2(0.562955,0.115562),
    vec2(0.190586,0.470121),
    vec2(0.770764,-0.297576),
    vec2(0.237281,0.931050),
    vec2(-0.666642,-0.455871),
    vec2(-0.905649,-0.298379),
    vec2(0.339520,0.157829),
    vec2(0.701438,-0.704100),
    vec2(-0.062758,0.160346),
    vec2(-0.220674,0.957141),
    vec2(0.642692,0.432706),
    vec2(-0.773390,-0.015272),
    vec2(-0.671467,0.246880),
    vec2(0.158051,0.062859),
    vec2(0.806009,0.527232),
    vec2(-0.057620,-0.247071),
    vec2(0.333436,-0.516710),
    vec2(-0.550658,-0.315773),
    vec2(-0.652078,0.589846),
    vec2(0.008818,0.530556),
    vec2(-0.210004,0.519896) 
);

float random(vec3 seed, int i){
    vec4 seed4 = vec4(seed,i);
    float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
    return fract(sin(dot_product) * 43758.5453);
}

vec3 HDR(vec3 image)
{
    vec3 result = vec3(1.0) - exp(-image.xyz * exposure);
    result.xyz = pow(result.xyz, vec3(1.0 / gamma));
    return (result.xyz - 0.5f) * 1.1f + 0.5f;
}

float NEAR = 0.1;
float FAR = 3000.0;
float LinearizeDepth(in float depth, in mat4 projMatrix) {
  return projMatrix[3][2] / (depth - projMatrix[2][2]);
}

float poissonShadowMapping(vec4 fragPosLightSpace){

    float visibility = 1.0;
    float w = fragPosLightSpace.w;
    vec4 projCoords = fragPosLightSpace / fragPosLightSpace.w;
    fragPosLightSpace = projCoords * 0.5 + 0.5;
    fragPosLightSpace.w = w;

    vec3 normal = normalize(Normal);
    float bias = max(0.01 * (1.0 - dot(normal, lightDir)), 0.005);

    float closest = texture(shadowMap, vec3(fragPosLightSpace.xy, fragPosLightSpace.z - bias)/fragPosLightSpace.w).r;
    float current = fragPosLightSpace.z/fragPosLightSpace.w;

    for (int i=0;i<8;i++){
        int index = int(16.0*random(floor(FragPos.xyz*100.0)+time, i))%16;
        visibility -= 0.125*(texture(shadowMap, vec3(fragPosLightSpace.xy+ poissonDisk[index]/700, fragPosLightSpace.z - bias)/fragPosLightSpace.w).r);
    }
    //visibility -= step(fragPosLightSpace.z, texture(shadowMap, vec3(fragPosLightSpace.xy, fragPosLightSpace.z-bias)).r);
    return visibility;
}

float calculateAttenuation(float radius, float distance);





vec3 CalculateDirectional();
vec3 calculatePoint(vec3 LightPos);

vec3 WorldPosFromDepth(float depth) {
    float z = depth * 2.0 - 1.0;

    vec4 clipSpacePosition = vec4(TexCoords * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = projection * clipSpacePosition;

    // Perspective division
    viewSpacePosition /= viewSpacePosition.w;

    vec4 worldSpacePosition = view * viewSpacePosition;

    return worldSpacePosition.xyz;
}


const vec3 Blue = normalize(vec3(29,91,186));
const vec3 Cian = normalize(vec3(31, 184, 138));
const vec3 Orange = normalize(vec3(224,115,36));
const vec3 Gray = normalize(vec3(0.001,0.001,0.001));
const vec3 Black = normalize(vec3(0.0,0.0,0.0));
const vec3 Brown = normalize(vec3(123.0,91.0,68.0));

//https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/
float SubsurfaceScattering(in vec3 L, in vec3 N, in vec3 V, in vec3 P, in bool A){
    
	int iLPower = 5;
  float fLTScale = 10.;
  float fLTThickness = 0.5;
  float fLTAmbient = 0.0;
  float fLightAttenuation = (A ? 1.0/pow(length(P + L), 2.0) : 1.0);
  vec3 vLTLight = normalize(L + N*0.5);
  float fLTDot = pow(saturate(dot(V, -vLTLight)), float(iLPower)) * fLTScale; 
  float fLT = fLightAttenuation * (fLTDot + fLTAmbient) * fLTThickness;
  
  return fLT;
}

/*
GLSL implementation of NormalMappingShadows 
Author: Boris Vorontsov (c) 2020
http://enbdev.com
http://enbdev.com/doc_normalmappingshadows.htm
*/
float NormalMapShadows(in vec3 lightdir) {

    float LodBias = 1.0;
    float HeightScale = 0.1;
    float ShadowHardness = 30.0;
    float SampleCount = 50;

    float invsamplecount = 1.0/SampleCount;
	float hardness = HeightScale * ShadowHardness;

	vec2 uvddx = dFdx(TexCoords) * LodBias;
	vec2 uvddy = dFdy(TexCoords) * LodBias;
    //lightdir = (uView * vec4(lightdir, 1.0)).xyz;
    lightdir = normalize(lightdir);
    vec2 dir = lightdir.xy * vec2(1.0,-1.0) * HeightScale;
    
	vec3 normal = textureGrad(gNormal, TexCoords, uvddx, uvddy).rgb;
    
    
	float step = invsamplecount;
	float pos = step;

	float slope = 0.0;
	float maxslope = 0.0;

    float nmshadow = 0.0;

    while (pos <= 1.0)
	{
		vec3 tmpNormal = textureGrad(gNormal, TexCoords+ dir * pos, uvddx, uvddy).rgb;
		//tmpNormal = tmpNormal * 2.0 - 1.0;

		float tmpLighting = dot(lightdir, tmpNormal);

		float shadowed = -tmpLighting;

		slope += shadowed;

		if (slope > maxslope) //more suitable for calculating soft shadows by distance or/and angle
		{
			nmshadow += hardness * (1.0-pos);
		}
		maxslope = max(maxslope, slope);

		pos += step;
	}

    return saturate(1.0 - nmshadow * invsamplecount);;
}
vec3 gridSamplingDisk[20] = vec3[]
(
   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);

float PointShadowCalculation(vec3 fragPos, vec3 LightPos, inout bool in_range)
{
    //float far_plane = 30.;
    vec3 fragToLight = fragPos - LightPos;
    float currentDepth = length(fragToLight);
    float shadow = 0.0;
    float bias = 0.15;
    int samples = 20;
    float viewDistance = length(viewPos - fragPos);
    in_range = true;
    if(currentDepth >= far_plane) {
        in_range = false;
        return 1.0;
    }
        
    float strength = pow(currentDepth / far_plane, 20.0);

    float diskRadius = (1.0 + (viewDistance / far_plane)) / 25.0;
    for(int i = 0; i < samples; ++i)
    {
        float closestDepth = texture(gPointShadowMap, fragToLight + gridSamplingDisk[i] * BlueNoiseInDisk[i].xyx * diskRadius).r;
        closestDepth *= far_plane;   // undo mapping [0;1]
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);
    return mix((1.0 - shadow), 1.0, strength);
}


void main()
{

    FragColor.a = 1.0;
    blurImage.a = 1.0;

    //originDepth = LinearizeDepth(originDepth, projection);
    FragPos = WorldPosFromDepth(textureLod(gDepth, TexCoords, 0).r);

    float distance = length(viewPos - FragPos);
    vec3  V = normalize(viewPos - FragPos);

    float visibility = exp(-pow((distance*density), gradient));
    //visibility = pow((fbm(vec3(vec2(FragPos.x, FragPos.y*2.0), 1.0)*2.0+time*0.1).r), 3.0) * visibility*5.0;

    Normal = textureLod(gNormal, TexCoords, 0).rgb;

    Normal = normalize(Normal);

    ExtraComponents = textureLod(gExtraComponents, TexCoords, 0).rgba;

    Diffuse = textureLod(gAlbedoSpec, TexCoords, 0).rgb;
    clearcoat = textureLod(gAlbedoSpec, TexCoords, 0).a;
    
    SpecularFactor = texture(gAlbedoSpec, TexCoords).a;

    if(ExtraComponents.y > 0.1){
    	FragColor.rgb = Diffuse;//mix(SkyColor, Diffuse, visibility) * ExtraComponents.y;
        if(ExtraComponents.y > 0.15)
    	    blurImage.rgb = mix(SkyColor, Diffuse, visibility) * ExtraComponents.y;
    	return;
    }

    Specular = texture(gNormal, TexCoords).a;
    SpecDiff = Diffuse * Specular;
    AmbientOcclusion = textureLod(ssaoColorBufferBlur, TexCoords, 0).r;
    vec4 FragPosLightSpace = lightSpaceMatrix * vec4(FragPos, 1.0);
    
    F0 = vec3(0.04);
    F0 = mix(F0, Diffuse, vec3(ExtraComponents.x));
    //vec3 V = normalize(viewPos - FragPos);
    vec3 F = fresnelSchlickRoughness(max(dot(Normal, V), 0.0), F0, Specular);
    
    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;//max(1.0 - kS, 0.04);
    kD *= 1.0 - ExtraComponents.x;
    //kD *= clamp(1.0 - ExtraComponents.x, 0.04, 1.0);

    //vec3 shc = sphericalHarmonics(Normal) * u_scaleFactor;
    vec4 irradiance_subsurf = textureLod(gLightAccumulation, TexCoords, 0).rgba;
    //vec3 diff = irradiance * Diffuse;
    //ambient = kD * (shc*Diffuse);
    //ambient = /*vec3(shc);//*/ clamp(Diffuse *  0.0008, 0.0, 1.0);

    shadow  = poissonShadowMapping(FragPosLightSpace);

    vec3 SSGI_cont = texture(SSGI, TexCoords).rgb;
    vec3 light = vec3(0.0);
    ambient = /*((SSGI_cont * 0.5) + (irradiance_subsurf.rgb * 0.5))*/irradiance_subsurf.rgb * Diffuse;
    //ambient /= 2.0;

    //if(hdr)
    //  ambient *= (AmbientOcclusion);
    //shadow = min(1.0-pow(NormalMapShadows(lightDir), 3.0), shadow);

    light += CalculateDirectionalPBR();
    
    vec3 L = normalize(lightDir);
    float SSS = SubsurfaceScattering(L, Normal, V, FragPos, false);

    //shadow = 0.0;//min(NormalMapShadows(lightDir)*0.2, shadow);

    //light += SSS * pow(Diffuse, vec3(2.2)) * irradiance_subsurf.a;
    bool in_range = false;
    for(int i = 0 ; i < outBuffer.Lights.length() ; i++)
    {
      switch(outBuffer.Lights[i].type){
        case 0:
                light += calculatePointPBR(outBuffer.Lights[i].position.rgb, outBuffer.Lights[i].color.rgb, outBuffer.Lights[i].watts);
            break;
        case 1:
            light += SpotLightPBR(outBuffer.Lights[i].position.rgb, outBuffer.Lights[i].direction.rgb, outBuffer.Lights[i].radius, outBuffer.Lights[i].color.rgb);
            break;
        case 2:
        //{
            float pointShadow = 1.0;
            vec3 res = vec3(0.0);
            if(i == 0){
                pointShadow = PointShadowCalculation(FragPos, outBuffer.Lights[i].position.rgb, in_range);
                res = SphereAreaLight(outBuffer.Lights[i].position.rgb,  outBuffer.Lights[i].radius, pow((normalize(outBuffer.Lights[i].position.rgb - FragPos)*0.5+0.5), 1.0/vec3(2.2)), outBuffer.Lights[i].watts);
            } else {
                res = SphereAreaLight(outBuffer.Lights[i].position.rgb,  outBuffer.Lights[i].radius, outBuffer.Lights[i].color.rgb, outBuffer.Lights[i].watts);
            }
            
            if(i == 0 && in_range){
                res *= pointShadow;
            }
            /*
            vec3 clearcoat_res = vec3(0.0);
            if(clearcoat > 0.0) {
                clearcoat_res = SphereAreaLight(outBuffer.Lights[i].position.rgb,  outBuffer.Lights[i].radius, outBuffer.Lights[i].color.rgb, outBuffer.Lights[i].watts, true);
            }*/
            light += res;//mix(res, clearcoat_res, 0.5);
        //}
            break;
        case 3:
            light += HalfLambertSphereAreaLight(outBuffer.Lights[i].position.rgb,  outBuffer.Lights[i].radius, outBuffer.Lights[i].color.rgb, outBuffer.Lights[i].watts);
            break;

      }
    }
    

    //float pointShadow = PointShadowCalculation(FragPos, vec3(-5, 19.2,-28.74), in_range);
    //light += TubeAreaLight(vec3(0, 0, 0), vec3(19.37,10.2,12.74), vec3(-28.37,10.2,12.74),  0.2, normalize(vec3(1,1,1)), 100) * pointShadow;


    //if(hdr)
    //  light*=AmbientOcclusion;

    light += max(kD * ambient, 0.0);

    const float lowerlimit = 0.0;
    const float upperlimit = 0.07;
    float scatteringFactor = clamp((FragPos.y - lowerlimit) / (upperlimit - lowerlimit), 0.0, 1.0);
    vec3 Background = mix(Cian, Brown, clamp(FragPos.y*5.0+0.15, 0.0, 1.0));

    //vec3 SkyColor = mix(Orange, Background, scatteringFactor);

    vec3 fogColor = clamp(mix(Gray, Background, clamp(lightDir.y, 0.0, 1.0)), vec3(0.00011), normalize(vec3(221,221,221)));

    //vec3 testNormals = ((vec4(Normal, 1.0) * 0.5+0.5)).rgb;
    FragColor.rgb = max(light, vec3(0.0));//max(vec3(0.0), mix(SkyColor, light, visibility));
    vec3 testHDR = FragColor.rgb;
    float brightness = dot(testHDR.rgb , vec3(0.2126, 0.7152, 0.0722));

    /*if(brightness > 1.0)
        blurImage.rgb = clamp(FragColor.rgb * 0.01, vec3(1.0), vec3(1.01));
    else*/
    blurImage.rgb = vec3(0.0);

    FragColor.a = 1.0;
    blurImage.a = 1.0;

}
/*
vec3 CalculateDirectional()
{
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 lightcolor = normalize(vec3(205, 109, 39));
    vec3 lightcolor2 = normalize(vec3(256, 75, 20));
    vec3 lightdirection = lightDir;

    if(clamp(lightDir.y + 0.1, 0.0, 1.0) < 0.0)
    {
      vec3 lightdirection = -lightDir;
      lightcolor = normalize(vec3(0.5, 0.5, 0.5));
    }

    float diff =  max(dot(lightDir, Normal), 0.0);
    vec3 diffuse = diff * Diffuse;

    vec3 halfwayDir = normalize(lightDir + viewDir);
    vec3 specular = pow(max(dot(Normal, halfwayDir), 0.0), clamp(Specular * 256, 16.0, 256.0)) * vec3(Specular) * 1.5;

    //ambient = Diffuse * vec3(mix(0.005, 0.03, clamp(lightDir.y + 0.1, 0.0, 1.0)));

    vec3 lc = mix(lightcolor2, lightcolor, lightDir.y);

    return mix(vec3(0.0), clamp(1.0 - shadow, 0.0, 1.0) * vec3(diffuse + specular) * lc, clamp(lightDir.y + 0.1, 0.0, 1.0)) * 2.0;

}


vec3 calculatePoint(vec3 LightPos)
{
	vec3 lightcolor = normalize(LightPos) *0.5+ 0.5;

    if(LightPos.z > 53 && LightPos.z < 55)
        lightcolor = vec3(0.0, 0.0, 0.7);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 lightDirection = normalize(LightPos - FragPos);
    float diff =  max(dot(lightDirection, Normal), 0.0);
    vec3 diffuse = vec3(diff) * Diffuse;

    float distance = length(LightPos - FragPos);
    attenuation = clamp(1.0 - distance/radius, 0.0, 1.0);
    attenuation *= attenuation;
    vec3 halfwayDir = normalize(lightDirection + viewDir);
    float refractiveFactor = dot(viewDir, Normal);
    float spec = pow(max(dot(Normal, halfwayDir), 0.0), max(clamp((1 - refractiveFactor) * 256, 16.0, 256.0), clamp((1 - Specular) * 256, 16.0, 256.0))) ;
    vec3 specular = vec3(1.0) * spec * SpecDiff;
    diffuse  *= attenuation;
    specular *= attenuation * 25;

    return  (specular * clamp( 1 - refractiveFactor, 0.1, 0.9) + diffuse) * lightcolor;
}
*/




