#version 430 core

layout (binding = 0) uniform sampler2D texture0;
layout (binding = 1) uniform sampler2DShadow shadowMap;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

uniform vec3 viewDir;
uniform vec3 viewPos;
uniform vec3 lightDir;
uniform mat4 lightSpaceMatrix;

out vec4 fragColor;

float poissonShadowMapping(vec4 fragPosLightSpace){

    float visibility = 1.0;
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    fragPosLightSpace = fragPosLightSpace * 0.5 + 0.5;
    
    vec3 normal = normalize(Normal);
    float bias = max(0.01 * (1.0 - dot(normal, lightDir)), 0.005);

	visibility = (texture(shadowMap, vec3(fragPosLightSpace.xy, fragPosLightSpace.z - bias)/fragPosLightSpace.w).r);


    return visibility;
}

void main()
{
	vec4 fragPosLightSpace = vec4(lightSpaceMatrix * vec4(FragPos, 1.0));
	vec3 result = dot(viewDir, Normal) * texture(texture0, TexCoords) * poissonShadowMapping(fragPosLightSpace);

	fragColor = result+0.15;
}