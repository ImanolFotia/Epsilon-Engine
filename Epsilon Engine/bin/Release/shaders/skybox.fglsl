#version 330 core
in vec3 TexCoords;
in vec2 TexCoord;
in mat3 TBN;
in vec3 FragPos;
layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 blurImage;
layout(location = 2) out vec4 gPosition;
//layout(location = 1) out vec4 BrightFragColor;

uniform sampler2D tex;
uniform sampler2D texn;
const float lowerlimit = 0.0;
const float upperlimit = 0.05;

uniform vec3 LightDirection;
uniform float time;
uniform float exposure;
uniform bool renderDepth;
vec3 SkyColor = vec3(1.0,1.0,1.0);
vec3 NightFog = vec3(0.0,0.0,0.0);
vec4 nightcolor = vec4(0.05,0.05,0.05,1.0);

const float CloudSpeed = 0.01;

const float CloudSpeedOffset1 = 0.05; 
const float CloudSpeedOffset2 = 0.5;
const float CloudSpreading = 10.0f;

float gamma = 2.2;

vec3 HDR(vec3 image)
{
    vec3 result = vec3(1.0) - exp(-image.xyz * exposure);
    result.xyz = pow(result.xyz, vec3(1.0 / gamma));
    return (result.xyz - 0.5f) * 1.1f + 0.5f;
}

float hash( float n ) { return fract(sin(n)*753.5453123); }

float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
    
    float n = p.x + p.y*157.0 + 113.0*p.z;
    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),
               mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);
}

const mat3 m = mat3( 0.00,  0.80,  0.60,
                    -0.80,  0.36, -0.48,
                    -0.60, -0.48,  0.64 );
void main()
{
    float factor = (TexCoords.y - lowerlimit) / (upperlimit - lowerlimit);
    factor = clamp(factor, 0.0, 0.9);
    vec2 cloudUV  = (TexCoords.xz/TexCoords.y)/CloudSpreading + time * CloudSpeedOffset1 * CloudSpeed;
    vec2 cloudUV2 = (TexCoords.xz/TexCoords.y)/CloudSpreading + time * CloudSpeedOffset2 * CloudSpeed;
    vec4 Tex = texture(tex, cloudUV) * 1.5;

    vec4 Tex2 = texture(tex, vec2(cloudUV2.x - 0.3, cloudUV2.y + 0.5)) * 1;
/*
    Tex = mix(Tex, Tex2, 0.5);

            vec3 q = 12.0*TexCoords + time*CloudSpeed;
            float f  = 0.5000*noise( q ); q = m*q*2.01;
            f += 0.2500*noise( q ); q = m*q*2.02;
            f += 0.1250*noise( q ); q = m*q*2.03;
            f += 0.0625*noise( q ); q = m*q*2.01;

            f *= 0.5 + 0.5 * f;  

    Tex2 =    vec4(vec3(f), 1.0);

                q = 24.0*TexCoords + time*CloudSpeed;
            f  = 0.5000*noise( q ); q = m*q*2.01;
            f += 0.2500*noise( q ); q = m*q*2.02;
            f += 0.1250*noise( q ); q = m*q*2.03;
            f += 0.0625*noise( q ); q = m*q*2.01; 
            f += 0.03125*noise( q ); q = m*q*2.01; 
            f += 0.015625*noise( q ); q = m*q*2.01; 
            f += 0.0078125*noise( q ); q = m*q*2.01; 
            f += 0.00390625*noise( q ); q = m*q*2.01;     

            f *= 0.5 + 0.5 * f;  

    Tex = vec4(vec3(f), 1.0);
*/
    Tex = mix(Tex, Tex2, 0.5);

    float cloudmixFactor = Tex.r;

    //Tex = mix(vec4(-0.5, -0.5, -1.0, cloudmixFactor), vec4(vec3(1.0), cloudmixFactor), cloudmixFactor);

	SkyColor = mix(normalize(vec3(250, 190, 108)), SkyColor, abs(LightDirection.y));

    vec4 color;



    color = normalize(mix(vec4(vec3(205, 109, 39), 1.0), vec4(65,82,217,1),(TexCoords.y)/(0.1)));

    color = mix(nightcolor, color, max(LightDirection.y, 0.0));

    Tex = Tex * clamp(LightDirection.y + 0.5, 0.1, 1.0);

    color = mix(color, Tex, cloudmixFactor);


    vec3 fogColor = mix(NightFog, SkyColor, clamp(LightDirection.y + 0.5, 0.1, 1.0));

    //if(renderDepth)
    //{
        gPosition = vec4(FragPos, 1000000000.0);
    //}

    FragColor.rgb = mix(fogColor, color.rgb, factor);
    FragColor.a = 1.0;
    float brightness = dot(FragColor.rgb * ((exposure - 3.0) <= 0 ? 1.0 : (exposure - 3.0)), vec3(0.2126, 0.7152, 0.0722));
    if(brightness > 1.0)
    blurImage = FragColor;


}
