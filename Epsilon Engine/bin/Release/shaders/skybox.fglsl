#version 330 core
in vec3 TexCoords;
in vec2 TexCoord;
layout(location = 0) out vec4 FragColor;
//layout(location = 1) out vec4 BrightFragColor;

uniform samplerCube skybox;
uniform sampler2D tex;
const float lowerlimit = 0.0;
const float upperlimit = 0.2;

uniform vec3 LightDirection;
uniform float time;
vec3 SkyColor = vec3(0.5,0.5,0.5);
vec3 NightFog = vec3(0.1,0.1,0.1);

const float CloudSpeed = 0.3;

const float CloudSpeedOffset1 = 0.01; 
const float CloudSpeedOffset2 = 0.05;

float gamma = 2.2;

vec3 HDR(vec3 image)
{
    vec3 result = vec3(1.0) - exp(-image.xyz * 1.5);
    result.xyz = pow(result.xyz, vec3(1.0 / gamma));
    return (result.xyz - 0.5f) * 1.1f + 0.5f;
}
void main()
{
    float factor = (TexCoords.y - lowerlimit) / (upperlimit - lowerlimit);
    factor = clamp(factor, 0.0, 0.7);
    vec4 skyboxTex = texture(skybox, TexCoords);
    vec2 cloudUV  = (TexCoords.xz/TexCoords.y)/10 + time * CloudSpeedOffset1 * CloudSpeed;
    vec2 cloudUV2 = (TexCoords.xz/TexCoords.y)/10 + time * CloudSpeedOffset2 * CloudSpeed;
    vec4 Tex = texture(tex, cloudUV) * 1.5;

    vec4 Tex2 = texture(tex, vec2(cloudUV2.x - 0.3, cloudUV2.y + 0.5)) * 1;

    Tex = mix(Tex, Tex2, 0.5);

		SkyColor = mix(normalize(vec3(250, 190, 108)), SkyColor, abs(LightDirection.y)+0.2);

    float average = 0.2126 * skyboxTex.r + 0.7152 * skyboxTex.g + 0.0722 * skyboxTex.b;

    vec4 nightcolor = /*vec4(average, average, average, 1.0)*/vec4(0.0,0.0,0.0,1.0);
    nightcolor = mix(nightcolor, vec4(0.0,0.0,0.0,1.0), 0.8);

    vec4 color;

    color = normalize(mix(vec4(140, 186, 189, 1.0), vec4(65,82,237,1),(TexCoords.y)/(0.1)));

    color = mix(nightcolor, color, max(LightDirection.y, 0.0));

    color = mix(color, Tex, Tex.r);

    vec3 fogColor = mix(NightFog, SkyColor, clamp(LightDirection.y + 1, 0.0, 1.0));


    FragColor.rgb = mix(fogColor, color.rgb, factor) * 0.25;
    FragColor.a = 1.0;
    //float brightness = dot(FragColor.rgb, vec3(0.2126, 0.7152, 0.0722));
    //if(brightness > 0.7)
    //BrightFragColor = FragColor;


}
