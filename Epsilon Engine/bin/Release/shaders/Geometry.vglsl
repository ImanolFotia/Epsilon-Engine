#version 440 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;

out VS_OUT{
out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoords;
out mat3 TBN;
out mat3 TBN2;
out vec3 wFragPos;
} vs_out;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 PrevModel;
uniform mat4 PrevView;
//uniform vec4 clipplane;

vec3 T;
vec3 B;
vec3 N;

out vec4 PrevPosition;
out vec4 Position;
mat3 CreateTBNMatrix(mat3 normalMatrix)
{
     T = normalize(normalMatrix * tangent);
     B = normalize(normalMatrix * bitangent);
     N = normalize(normalMatrix * normal);

    return transpose(mat3(T, B, N));
}

void main()
{
  vec4 worldPos = model * vec4(position, 1.0);
  //gl_ClipDistance[0] = dot(worldPos, clipplane);
  vec4 viewPos = view * worldPos;
  vs_out.FragPos = viewPos.xyz;
  vs_out.wFragPos = worldPos.xyz;
  Position = projection * viewPos;
  gl_Position = projection * viewPos;
  PrevPosition = projection * PrevView * PrevModel * vec4(position, 1.0);
  vs_out.TexCoords = vertexUV;

  mat3 normalMatrix = transpose(inverse(mat3(model)));
  vs_out.TBN = CreateTBNMatrix(normalMatrix);
  vs_out.Normal = normal;
  normalMatrix = transpose(inverse(mat3(view * model)));
  vs_out.TBN2 = CreateTBNMatrix(normalMatrix);
}
