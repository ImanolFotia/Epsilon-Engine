#version 440 core

layout (binding = 0) uniform sampler2D gDepth;
layout (binding = 1) uniform sampler2D gNormal;
layout (binding = 2) uniform sampler2D texNoise;


layout(location = 0) out float FragColor;
in vec2 TexCoords;

const int kernelSize = 9;
uniform vec3 samples[kernelSize];

// parameters (you'd probably want to use them as uniforms to more easily tweak the effect)
float radius = 2.0;

uniform float width;
uniform float height;

// tile noise texture over screen based on screen dimensions divided by noise size
vec2 noiseScale = vec2(width*3.0f, height*3.0f);

uniform mat4 projection;
uniform mat4 invprojection;
uniform mat4 invView;
uniform vec3 viewRay;
uniform mat4 view;

vec3 WorldPosFromDepth(float depth) {
    float z = depth * 2.0 - 1.0;

    vec4 clipSpacePosition = vec4(TexCoords * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = invprojection * clipSpacePosition;

    // Perspective division
    viewSpacePosition /= viewSpacePosition.w;

    //vec4 worldSpacePosition = inverse(view) * viewSpacePosition;

    return viewSpacePosition.xyz;
}


float NEAR = 0.1;
float FAR = 3000.0;

float LinearizeDepth(float depth)
{
    float z = depth * 2.0 - 1.0; // Back to NDC
    return ((2.0 * NEAR * FAR) / (FAR + NEAR - z * (FAR - NEAR)));
}


bool ScreenDoor[4][4];

void main()
{
    // Get input for SSAO algorithm

      ScreenDoor[0][0] = true;
      ScreenDoor[1][0] = true;
      ScreenDoor[2][0] = true;
      ScreenDoor[3][0] = false;

      ScreenDoor[0][1] = false;
      ScreenDoor[1][1] = true;
      ScreenDoor[2][1] = false;
      ScreenDoor[3][1] = true;

      ScreenDoor[0][2] = true;
      ScreenDoor[1][2] = false;
      ScreenDoor[2][2] = true;
      ScreenDoor[3][2] = true;

      ScreenDoor[0][3] = false;
      ScreenDoor[1][3] = true;
      ScreenDoor[2][3] = false;
      ScreenDoor[3][3] = true;

    ivec2 invFragCoord = ivec2(gl_FragCoord)*2;///ivec2(fragCoord);  
    int indexX = int(mod(int(invFragCoord.x), 4)); 
    int indexY = int(mod(int(invFragCoord.y), 4));
    
    if(!ScreenDoor[indexX][indexY])
        discard;

    float depth = texture(gDepth, TexCoords, 2.0).r;
 
    vec3 fragPos = WorldPosFromDepth(depth);

    vec3 normal = vec3(texture(gNormal, TexCoords, 1.0) * invView);
    vec3 randomVec = texture(texNoise, TexCoords * noiseScale).xyz;
    // Create TBN change-of-basis matrix: from tangent-space to view-space
    vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
    vec3 bitangent = cross(normal, tangent);
    mat3 TBN = mat3(tangent, bitangent, normal);
    // Iterate over the sample kernel and calculate occlusion factor
    float occlusion = 0.0;
    for(int i = 0; i < kernelSize; ++i)
    {
        // get sample position
        vec3 samp = TBN * samples[i]; // From tangent to view-space
        samp = fragPos + samp * radius;

        // project sample position (to sample texture) (to get position on screen/texture)
        vec4 offset = vec4(samp, 1.0);
        offset = projection * offset; // from view to clip-space
        offset.xyz /= offset.w; // perspective divide
        offset.xyz = offset.xyz * 0.5 + 0.5; // transform to range 0.0 - 1.0
        // get sample depth
        offset.x = clamp(offset.x, 0.001, 0.999);
        offset.y = clamp(offset.y, 0.001, 0.999);

        float sampleDepth = -LinearizeDepth(texture(gDepth, offset.xy, 2.0).r); // Get depth value of kernel sample
        float bias = max(1.5 * (1.0 - dot(normal, -fragPos)), 0.1);
        bias = 0.025;
        // range check & accumulate
        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(fragPos.z - sampleDepth));
        occlusion += (sampleDepth >= samp.z + bias ? 1.0 : 0.0) * rangeCheck;
    }
    occlusion = 1.0 - (occlusion / kernelSize);
    FragColor = pow(occlusion, 5);
}
