#version 330 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 texCoords;
layout(location = 2) in vec3 normal;
layout(location = 3) in mat4 positions;

uniform mat4 MVP;

uniform mat4 view;
uniform mat4 projection;
uniform float time;

out vec2 UV;
out vec3 FragPos;
out vec3 wFragPos;
out vec3 Normal;

float hash( float n ) { return fract(sin(n)*753.5453123); }

void main()
{
	/*
    vec3 vertexPosition =
    GrassPos
    + CameraRight * position.x * 1.0
    + vec3(0,1,0)  * position.y * 1.0;

    gl_Position = projection * view * positions * vec4(vertexPosition, 1.0) ;

*/
    float t = positions[3][0] / 256;
	vec3 newPosition = vec3(position.x + sin(time * hash(t)) * max(position.y, 0.0), position.y, position.z);

    gl_Position = projection * view * positions * vec4(newPosition, 1.0);

    wFragPos = vec3(positions * vec4(newPosition, 1.0f));

    FragPos = vec3(view * vec4(wFragPos, 1.0f));

    UV = texCoords;//-position.xy + vec2(0.5, 0.5);
    Normal = normal * position * mat3(view * positions);
}
