#version 440 core

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 blurImage;

layout (binding = 0) uniform sampler2D gPositionDepth;
layout (binding = 1) uniform sampler2D gNormal;
layout (binding = 2) uniform sampler2D gAlbedoSpec;
layout (binding = 3) uniform sampler2D ssaoColorBufferBlur;
layout (binding = 4) uniform sampler2D shadowMap;

uniform float exposure;
uniform mat4 lightSpaceMatrix;
uniform vec3 viewPos;
uniform vec3 lightDir;
uniform bool hdr;
uniform vec3 LightPositions[7];
in vec2 TexCoords;

const float gamma = 2.2;
const int NR_LIGHTS = 32;
const float shadowDistance = 100.0f;
const float fadeDistance = 10.0f;
const vec3 SkyColor = vec3(0.5,0.5,0.5);
const float density = 0.006;
const float gradient = 3.0;

struct Light {
    vec3 Position;
    vec3 Color;

    float Linear;
    float Quadratic;
};


vec3 FragPos;
vec3 Normal;
vec3 Diffuse;
float Specular;
float Depth;
vec3 ambient;
vec3 SpecDiff;
float shadow = 0.0;

vec3 CalculateDirectional();
vec3 calculatePoint(vec3 LightPos);


vec3 HDR(vec3 image)
{
    vec3 result = vec3(1.0) - exp(-image.xyz * exposure);
    result.xyz = pow(result.xyz, vec3(1.0 / gamma));
    return (result.xyz - 0.5f) * 1.1f + 0.5f;
}

float SampleShadowMap(vec2 coords, float compare)
{
    return step(compare, texture2D(shadowMap, coords.xy).r);
}

float SampleShadowMapLinear(vec2 coords, float compare, vec2 texelSize)
{
    vec2 pixelPos = coords/texelSize + vec2(0.5);
    vec2 fracPart = fract(pixelPos);
    vec2 startTexel = (pixelPos - fracPart) * texelSize;
    
    float blTexel = SampleShadowMap(startTexel, compare);
    float brTexel = SampleShadowMap(startTexel + vec2(texelSize.x, 0.0), compare);
    float tlTexel = SampleShadowMap(startTexel + vec2(0.0, texelSize.y), compare);
    float trTexel = SampleShadowMap(startTexel + texelSize, compare);
    
    float mixA = mix(blTexel, tlTexel, fracPart.y);
    float mixB = mix(brTexel, trTexel, fracPart.y);
    
    return mix(mixA, mixB, fracPart.x);
}

float ShadowCalculationPCF(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // Transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // Get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // Get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // Calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(Normal);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    // Check whether current frag pos is in shadow
    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {/*
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;  */

            vec2 coordsOffset = vec2(x,y)*texelSize;
            shadow += SampleShadowMapLinear(projCoords.xy + coordsOffset, projCoords.z - bias, texelSize);      
        }    
    }
    shadow /= 9.0;
    
    // Keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return 1 - shadow;
}

float linstep(float low, float high, float v)
{
    return clamp((v - low)/(high - low), 0.0, 1.0);
}

float sampleVarianceShadowMapping(vec4 coords)
{
    float shadow;

    vec3 projCoords = coords.xyz / coords.w;
    projCoords = projCoords * 0.5 + 0.5;
    float compare = projCoords.z;
    float depthMap = texture(shadowMap, projCoords.xy).r;

    vec2 moments = vec2(depthMap, pow(depthMap, 2));

    float p = step(compare, moments.x);
    float variance = max(moments.y - (moments.x * moments.x), 0.00002);

    float d = compare - moments.x;
    float pMax = linstep(0.1, 1.0, variance / (variance + d*d));

    shadow = 1 - min(max(p, pMax), 1.0f);

        if(projCoords.z > 1.0)
        shadow = 0.0;

    return shadow;
}


    float attenuation = 0.0f;
    float minLight = 0.05;
    float b = 1.0 / 40.0;
    float radius = sqrt(1.0 / (b * minLight));

void main()
{

    FragColor.a = 1.0;
    blurImage.a = 1.0;

    // Retrieve data from gbuffer
    FragPos = texture(gPositionDepth, TexCoords).rgb;
    Depth = texture(gPositionDepth, TexCoords).a;
    Normal = texture(gNormal, TexCoords).rgb;
    Diffuse = texture(gAlbedoSpec, TexCoords).rgb;
    Specular = texture(gAlbedoSpec, TexCoords).a;
    SpecDiff = Diffuse * Specular;
    vec4 FragPosLightSpace = lightSpaceMatrix * vec4(FragPos, 1.0f);
    vec3 AmbientOcclusion = vec3(texture(ssaoColorBufferBlur, TexCoords).r);
    ambient = clamp(Diffuse *  0.05 /** normalize(vec3(1.0, 1.0, 1.5))*/, 0.0, 1.0);

    shadow = sampleVarianceShadowMapping(FragPosLightSpace);

    vec3 light = CalculateDirectional();

    b = 1.0 / (radius*radius * minLight);


    for(int i = 0 ; i < 7 ; i++)
      light += calculatePoint(LightPositions[i]);

    light += ambient;

    float distance = length(viewPos - FragPos);

    float visibility = exp(-pow((distance*density), gradient));
    vec3 composedScene = light.rgb * (AmbientOcclusion);

    if(hdr == true)
    {

        FragColor.rgb = mix(SkyColor, composedScene, visibility);
        vec3 testHDR = HDR(FragColor.rgb);
        float brightness = dot(testHDR.rgb, vec3(0.2126, 0.7152, 0.0722));
        if(brightness > 1.0)
        blurImage.rgb = FragColor.rgb;
    }
    
    else
    {
    FragColor.rgb =  mix(SkyColor, light.rgb, visibility);
    vec3 testHDR = HDR(FragColor.rgb);
    float brightness = dot(testHDR.rgb, vec3(0.2126, 0.7152, 0.0722));
    if(brightness > 1.0)
    blurImage.rgb = FragColor.rgb;
    }
}

vec3 CalculateDirectional()
{
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 lightcolor = normalize(vec3(250, 190, 108));
    vec3 lightdirection = lightDir;
    if(clamp(lightDir.y + 0.1, 0.0, 1.0) < 0.0){
      vec3 lightdirection = -lightDir;
      lightcolor = normalize(vec3(0.5, 0.5, 0.5));
      }

    float diff =  max(dot(lightDir, Normal), 0.0);
    vec3 diffuse = diff * Diffuse;

    vec3 halfwayDir = normalize(lightDir + viewDir);
    vec3 specular = pow(max(dot(Normal, halfwayDir), 0.0), clamp(Specular * 256, 16.0, 256.0)) * vec3(Specular) * 1.5;

    //return ((1.0 - shadow) * (diffuse + specular));

    return mix(ambient, clamp(1.0 - shadow, 0.0, 1.0) * vec3(diffuse + specular) * lightcolor * 2, clamp(lightDir.y + 0.1, 0.0, 1.0));



}


vec3 calculatePoint(vec3 LightPos)
{

    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 lightDirection = normalize(LightPos - FragPos);
    float diff =  max(dot(lightDirection, Normal), 0.0);
    vec3 diffuse = vec3(diff) * Diffuse;


    float distance = length(LightPos - FragPos);
    attenuation = clamp(1.0 - distance/radius, 0.0, 1.0);
    attenuation *= attenuation;
    vec3 halfwayDir = normalize(lightDirection + viewDir);
    float refractiveFactor = dot(viewDir, Normal);
    float spec = pow(max(dot(Normal, halfwayDir), 0.0), max(clamp((1 - refractiveFactor) * 256, 16.0, 256.0), clamp((1 - Specular) * 256, 16.0, 256.0))) ;
    vec3 specular = vec3(1.0) * spec * SpecDiff;
    diffuse  *= attenuation;
    specular *= attenuation * 25;

    return  (specular * clamp( 1 - refractiveFactor, 0.1, 0.9) + diffuse);
}
