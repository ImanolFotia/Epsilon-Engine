#version 330 core

uniform sampler2D compositeImage;
uniform sampler2D blurredSampler;
uniform sampler1D uLensColor;
uniform sampler2D uLensDirtTex;
uniform sampler2D uLensStarTex;
uniform sampler2D brightColorBuffer;
uniform sampler2D gDepth;
uniform float time;
out vec4 color;
noperspective in vec2 TexCoords;
uniform float exposure;
uniform mat4 choppedView;
uniform mat4 projection;
uniform vec3 sunPos;
uniform bool lightShafts;
const float gamma = 2.2;
const float contrast = 0.2;
uniform vec3 position;
uniform vec2 Resolution;


uniform bool BokehOn;
uniform bool ChromaticAberrationOn;

int uGhosts = 5;               // number of ghost samples
float uGhostDispersal = 0.3;  // dispersion factor
float uHaloWidth = 10;
float uDistortion = 5;

vec3 HDR(vec3 image) {
  vec3 result = vec3(1.0) - exp(-image.xyz * exposure);
  result.xyz = pow(result.xyz, vec3(1.0 / gamma));
  return (result.xyz - 0.5) * (1.0 + contrast) + 0.5;
}

float A = 0.15;
float B = 0.50;
float C = 0.10;
float D = 0.20;
float E = 0.02;
float F = 0.30;
float W = 11.2;

vec3 Uncharted2Tonemap(vec3 x) {
  return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;
}

vec3 HDR2(vec3 image) {
  float ExposureBias = 2.0;
  image *= exposure;
  vec3 curr = Uncharted2Tonemap(ExposureBias * image);

  vec3 whiteScale = 1.0f / Uncharted2Tonemap(vec3(W));
  vec3 color = curr * whiteScale;

  vec3 result = pow(color, vec3(1.0 / gamma));
  return (result.xyz - 0.5) * (1.0 + contrast) + 0.5;
}

/*----------------------------------------------------------------------------*/
vec4 textureDistorted(in sampler2D tex, in vec2 texcoord, in vec2 direction,
                      in float distortion) {
  /*
  return vec4(texture(tex, texcoord + direction * distortion.r).r,
              texture(tex, texcoord + direction * distortion.g).g,
              texture(tex, texcoord + direction * distortion.b).b, 1.0);
*/
        float dist = sqrt(pow(direction.x,2) + pow(direction.y,2));
        //float _ChromaticAberration = 0.5;
        float mov = distortion * dist;
        vec2 uvR = vec2(texcoord.x - mov, texcoord.y);
        vec2 uvG = vec2(texcoord.x + mov, texcoord.y);
        vec2 uvB = vec2(texcoord.x, texcoord.y - mov);
        vec4 colR = texture(tex, uvR);
        vec4 colG = texture(tex, uvG);
        vec4 colB = texture(tex, uvB);
        return vec4(colR.r, colG.g, colB.b, 0.8f);
}

/*----------------------------------------------------------------------------*/


vec3 lOff() {
  vec2 u = vec2(1.0, 0.0);
  mat2 a = mat2(u, -u.y, u.x);

  vec3 l = normalize(vec3(1.5, 1., -0.5));
  l.xz = a * l.xz;
  l.xy = a * l.xy;

  return l;
}

vec3 changeSaturation(vec3 color, float saturation) {
  float luma = dot(vec3(0.213, 0.715, 0.072) * color, vec3(1.));
  return mix(vec3(luma), color, saturation);
}

#define PI 3.14159265359
#define G  1.61803398875

uniform int onmenu;

vec3 Bokeh(vec2 uv, float rad, float thres, float mult) {
  vec3 col = vec3(0.0), res = vec3(0.0);
  float r = 1.0;

  vec2 pixelSize = 1.0 / Resolution.xy;
  float i = 0.0;
  int numLoops = 0;
  for (i = 0.0001; i < PI * 2.0; i += PI * 0.031415) {
    r += (1.0 / r);

    vec2 disk = vec2(sin(i * 10.0) * (1.0 - r), cos(i * 10.0) * (1.0 - r)) * rad;

    col = texture(compositeImage, uv + pixelSize * disk).rgb;

    res += col;
    numLoops++;
  }
  return max(res / numLoops, 0.000001);
}

float NEAR = 0.1;
float FAR = 3000.0;

float LinearizeDepth(float depth) {
  float z = depth * 2.0 - 1.0;  // Back to NDC
  return ((2.0 * NEAR * FAR) / (FAR + NEAR - z * (FAR - NEAR)));
}


#include <godrays.glsl>

void main() {
  vec2 texcoord = -TexCoords + vec2(1.0);
  vec2 texelSize = 1.0 / vec2(textureSize(blurredSampler, 0));
  // ghost vector to image centre:
  vec2 ghostVec = (vec2(0.5) - texcoord) * uGhostDispersal;
  vec2 haloVec = normalize(ghostVec) * uHaloWidth;
  vec3 distortion =
      vec3(-texelSize.x * uDistortion, 0.0, texelSize.x * uDistortion);

  // sample ghosts:
  vec4 result = vec4(0.0);
  for (int i = 0; i < uGhosts; ++i) {
    vec2 offset = fract(texcoord + ghostVec * float(i));
    float weight = length(vec2(0.5) - offset) / length(vec2(0.5));
    weight = pow(1.0 - weight, 10.0);

    result += texture(blurredSampler, offset);
  }

  result *= texture(uLensColor, length(vec2(0.5) - texcoord) / length(vec2(0.5)));

  vec4 lensMod = texture(uLensDirtTex, TexCoords);
  lensMod += texture(uLensStarTex, TexCoords);

  vec3 bloom = texture(blurredSampler, TexCoords).rgb;
  vec3 composite = texture(compositeImage, TexCoords).rgb;

  vec2 fragcoord = gl_FragCoord.xy / Resolution;

  vec4 GodRays = godRays(brightColorBuffer, sunPos/*normalize(vec3(83, 6, -3) - vec3(0, 6, -3))*/ );

  fragcoord = gl_FragCoord.xy / Resolution;
  float vignete =
      1.0 - smoothstep(0.9, 1.75, length(vec2(0.0) - (fragcoord * 2.0 - 1.0)));

  float DOFRadius =
      smoothstep(0.0, 1.75, length(vec2(0.0) - (fragcoord * 2.0 - 1.0)));

  float referenceDepth = texture(gDepth, vec2(0.5), 4).r;
  float currentDepth = texture(gDepth, TexCoords, 4).r;

  float dDepth = abs(currentDepth - referenceDepth);

  if(onmenu == 1)
    DOFRadius = 1.0;
  else
    DOFRadius = clamp(dDepth * 15.0, 0.0, 0.85);


  //if(BokehOn)
    composite = Bokeh(TexCoords, DOFRadius, .10, 1.0);

  //if(ChromaticAberrationOn)
  //  composite = textureDistorted(compositeImage, TexCoords, normalize(fragcoord - vec2(0.0)), 0.001*pow(length((fragcoord * 2.0 - 1.0) - vec2(0.0)), 3.0)).rgb;

  composite = changeSaturation(composite, 1.0);

  color.rgb = HDR2(composite + (GodRays.rgb) + (bloom) + (result.rgb * lensMod.rgb * 5)) * vignete;

  color.a = 1.0;
}