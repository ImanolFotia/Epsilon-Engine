#version 330 core

uniform sampler2D sampler;
uniform sampler2D blurredSampler;
uniform sampler1D uLensColor;
uniform sampler2D uLensDirtTex;
uniform sampler2D uLensStarTex;
out vec4 color;
noperspective in vec2 TexCoords;
uniform float exposure;

const float gamma = 2.2;
const float contrast = 0.3;


   int uGhosts = 5; // number of ghost samples
   float uGhostDispersal = 0.3f; // dispersion factor
   float uHaloWidth = 10;
 float uDistortion = 5;

vec3 HDR(vec3 image)
{
    vec3 result = vec3(1.0) - exp(-image.xyz * exposure);
    result.xyz = pow(result.xyz, vec3(1.0 / gamma));
    return (result.xyz - 0.5f) * (1.0 + contrast) + 0.5f;
}

/*----------------------------------------------------------------------------*/
vec4 textureDistorted(
	in sampler2D tex, 
	in vec2 texcoord, 
	in vec2 direction,
	in vec3 distortion 
) {
	return vec4(
		texture(tex, texcoord + direction * distortion.r).r,
		texture(tex, texcoord + direction * distortion.g).g,
		texture(tex, texcoord + direction * distortion.b).b,
		1.0
	);
}

/*----------------------------------------------------------------------------*/

void main()
{

	vec2 texcoord = -TexCoords + vec2(1.0);
    vec2 texelSize = 1.0 / vec2(textureSize(blurredSampler, 0));
   // ghost vector to image centre:
    vec2 ghostVec = (vec2(0.5) - texcoord) * uGhostDispersal;
	vec2 haloVec = normalize(ghostVec) * uHaloWidth;
	vec3 distortion = vec3(-texelSize.x * uDistortion, 0.0, texelSize.x * uDistortion);
   
   // sample ghosts:  
      vec4 result = vec4(0.0);
      for (int i = 0; i < uGhosts; ++i) { 
        vec2 offset = fract(texcoord + ghostVec * float(i));
        float weight = length(vec2(0.5) - offset) / length(vec2(0.5));
      	weight = pow(1.0 - weight, 10.0);
  
        result += texture(blurredSampler, offset);
      }
      result *= texture(uLensColor, length(vec2(0.5) - texcoord) / length(vec2(0.5)));
/*
     float weight = length(vec2(0.5) - fract(texcoord + haloVec)) / length(vec2(0.5));
	weight = pow(1.0 - weight, 10.0);
	result += textureDistorted(
		blurredSampler,
		fract(texcoord + haloVec),
		normalize(ghostVec),
		distortion
	) * weight;
*/
	vec4 lensMod = texture(uLensDirtTex, TexCoords);
	lensMod += texture(uLensStarTex, TexCoords);

    vec3 hdrColor = texture(sampler, TexCoords).rgb;
    float rOffset = 0.004;
    float gOffset = 0.001;
    float bOffset = 0.004;
/*
    float rValue = texture2D(sampler, TexCoords - rOffset).r;  
    float gValue = texture2D(sampler, TexCoords - gOffset).g;
    float bValue = texture2D(sampler, TexCoords - bOffset).b;
*/
    vec3 bloom = texture(blurredSampler, TexCoords).rgb;
/*
    vec2 c = gl_FragCoord.xy / vec2(1920, 1080);

    float a = smoothstep( 0.2, 1.0, length(c - vec2(0.5, 0.5)));

    hdrColor *= 1.0 - a;
*/
    color.rgb  = HDR(hdrColor+ bloom + (result.rgb * lensMod.rgb*5));

    color.a = 1.0;

}


