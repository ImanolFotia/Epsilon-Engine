#version 330 core

uniform sampler2D grassTex;

in vec2 UV;
in vec3 FragPos;


out vec4 color;

vec3 CalculateDirectional(vec2 texCoords);

vec3 Normal = vec3(0.0f, 1.0f, 0.0f);

uniform vec3 viewPos;
uniform float plane;
uniform int clip_Direction;
uniform bool BelowWater;

void main()
{
/** Harcoded Cliping plane*/

/** Refraction*/

if(clip_Direction == 1)
{
    if(BelowWater == false)
    {
                if(FragPos.y > plane){
                    discard;}
    }
    if(BelowWater == true)
    {
                if(FragPos.y < plane){
                    discard;}
    }
}
/** Reflection*/
if(clip_Direction == -1)
{
        if(!BelowWater)
        {
                if(FragPos.y < plane){
                        discard;}
        }
        if(BelowWater)
        {
            discard;
        }
}


    if(texture(grassTex, UV ).a < 0.05)
        discard;

    vec3 result = CalculateDirectional(UV);

    color = vec4(result.rgb, 1.0f);
}

vec3 CalculateDirectional(vec2 texCoords)
{
    vec3 ambient = vec3(0.25,0.25,0.25) * vec3(texture(grassTex, texCoords ));
    vec3 lightcolor = vec3(244, 234, 108);
    vec3 lightdirection;
    vec3 viewDir;
    float diff;
    vec3 lightDir;
    vec3 norm;

        lightdirection = vec3(0.0, -1.0, -0.5);
        viewDir = normalize(viewPos - FragPos);
        norm = normalize(Normal);
        lightDir = normalize(-lightdirection);
        diff = max(dot(norm, lightDir), 0.0);

    vec3 diffuse =  diff * vec3(texture(grassTex, texCoords));

    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(norm, halfwayDir), 0.0), 32);
    vec3 specular = vec3(.5,.5,.5) * spec * vec3(texture(grassTex, texCoords).r);

    return (vec3(diffuse + specular)) ;

}
