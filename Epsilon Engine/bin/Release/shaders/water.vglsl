#version 330 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 texCoords;

uniform vec3 cameraPosition;
uniform mat4 MVP;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

out vec4 clipSpace;
out vec2 TexCoords;
out vec3 viewDir;
out float visibility;
out vec3 FragPos;
out vec3 wFragPos;
out mat3 viewMatrix;
out mat3 TBN;

const float density = 0.0004;
const float gradient = 3.5;

vec3 T;
vec3 B;
vec3 N;


    vec3 tangent;
    vec3 binormal;
    vec3 normal = vec3(0,1,0);
mat3 CreateTBNMatrix(mat3 normalMatrix)
{
     T = normalize(normalMatrix * tangent);
     B = normalize(normalMatrix * binormal);
     N = normalize(normalMatrix * normal);

    return transpose(mat3(T, B, N));
}
void main()
{
    vec4 worldPosition = model * vec4(position, 1.0f);
    clipSpace = projection * view * worldPosition;

    gl_Position = clipSpace;

    viewDir = cameraPosition - worldPosition.xyz;

    TexCoords = texCoords*5;
    vec4 PosToCam = view * worldPosition;
    float distance = length(PosToCam);
    wFragPos = worldPosition.xyz;
    viewMatrix = mat3(view);
    FragPos = vec3(PosToCam);
    visibility = exp(-pow((distance*density), gradient));

    mat3 NormalMatrix = transpose(inverse(mat3(view*model)));

        tangent;
        vec3 v1=cross(normal,vec3(0.0,0.0,1.0));
        vec3 v2=cross(normal,vec3(0.0,1.0,0.0));
        if(length(v1)>length(v2))
                tangent=v1;
        else
                tangent=v2;
        binormal=cross(normal,tangent);
        //TBN=mat3(t.x,b.x,n.x,t.y,b.y,n.y,t.z,b.z,n.z);

    TBN = CreateTBNMatrix(NormalMatrix);
}
