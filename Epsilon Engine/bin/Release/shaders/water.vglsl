#version 430 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 texCoords;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;

uniform vec3 cameraPosition;
uniform mat4 MVP;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

out vec4 clipSpace;
out vec2 TexCoords;
out vec3 viewDir;
out float visibility;
out vec3 FragPos;
out vec3 wFragPos;
out mat3 viewMatrix;
out mat3 TBN;
out mat3 TBN2;
out vec3 Normal;

const float density = 0.0004;
const float gradient = 3.5;

vec3 T;
vec3 B;
vec3 N;


mat3 CreateTBNMatrix(mat3 normalMatrix)
{
     T = normalize(normalMatrix * tangent);
     B = normalize(normalMatrix * bitangent);
     N = normalize(normalMatrix * normal);

    return transpose(mat3(T, B, N));
}
void main()
{
    vec4 worldPosition = model * vec4(position, 1.0f);
    clipSpace = projection * view * worldPosition;

    gl_Position = clipSpace;

    viewDir = cameraPosition - worldPosition.xyz;

    TexCoords = texCoords*50;
    vec4 PosToCam = view * worldPosition;
    float distance = length(PosToCam);
    wFragPos = worldPosition.xyz;
    viewMatrix = mat3(view);
    FragPos = vec3(PosToCam);
    visibility = exp(-pow((distance*density), gradient));

  mat3 normalMatrix = transpose(inverse(mat3(model)));
  TBN = CreateTBNMatrix(normalMatrix);
  normalMatrix = transpose(inverse(mat3(view * model)));
  TBN2 = CreateTBNMatrix(normalMatrix);
  Normal = normal;
}
