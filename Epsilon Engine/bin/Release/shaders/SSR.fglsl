#version 400 core

uniform sampler2D gFinalImage;
uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gExtraComponents;
uniform sampler2D gDepth; 

uniform mat4 invView;
uniform mat4 projection;
uniform mat4 invprojection;
uniform mat4 view;
uniform vec3 camDir;
uniform vec3 camPos;
noperspective in vec2 TexCoords;

out vec4 outColor;

const float rayStep = 0.1;
const float minRayStep = 0.1;
const float maxSteps = 30;
const float searchDist = 5;
const float searchDistInv = 0.2;
const int numBinarySearchSteps = 5;
const float maxDDepth = 1.0;
const float maxDDepthInv = 1.0;
const float reflectionSpecularFalloffExponent = 3.0;

float Metallic;

#define Scale vec3(.8, .8, .8)
#define K 19.19

vec3 PositionFromDepth(float depth);

vec3 BinarySearch(inout vec3 dir, inout vec3 hitCoord, inout float dDepth);
 
vec4 RayCast(vec3 dir, inout vec3 hitCoord, out float dDepth);

vec3 fresnelSchlick(float cosTheta, vec3 F0);

vec3 hash(vec3 a);

vec3 hash31(float a)
{
   vec3 p3 = fract(vec3(a) * Scale);
   p3 += dot(p3, p3.yzx+K);
   return fract((p3.xxy+p3.yzz)*p3.zyx); 
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
} 

void main()
{

    vec2 MetallicEmmissive = texture2D(gExtraComponents, TexCoords).rg;
    Metallic = MetallicEmmissive.r;

    if(Metallic <= 0.3)
        discard;
 
    vec3 worldNormal = vec3(texture2D(gNormal, TexCoords));
    vec3 viewNormal = vec3(vec4(worldNormal, 1.0) * invView);
    vec3 viewPos = PositionFromDepth( textureLod(gDepth, TexCoords, 2).x);
    vec3 worldPos = vec3(invView * vec4(viewPos, 1.0));
    vec3 albedo = texture(gFinalImage, TexCoords).rgb;

    //vec3 WorldPos = vec3(vec4(viewPos, 1.0) * invView);

    vec3 viewDir = normalize(camPos - worldPos);

    float spec = texture(gNormal, TexCoords).w;

    vec3 F0 = vec3(0.04); 
    F0      = mix(F0, albedo, Metallic);
    vec3 Fresnel = clamp(fresnelSchlickRoughness(max(dot(normalize(worldNormal), normalize(viewDir)), 0.0), F0, spec), vec3(0.0), vec3(1.0));

    vec3 hitPos = viewPos;
    float dDepth;
 
    vec3 q = hitPos * 2.0 - 1.0;
    //q.x = 16.0/9.0;
    vec3 jitt = normalize(hash(q)) * spec;
    // Reflection vector
    vec3 reflected = normalize(reflect(normalize(viewPos), normalize(viewNormal)));

    //jitt.x *= 16.0/9.0;
    vec4 coords = RayCast(reflected * max(minRayStep, -viewPos.z), hitPos, dDepth);
 
    vec2 dCoords = smoothstep(0.2, 0.6, abs(vec2(0.5, 0.5) - coords.xy));
 
 
    float screenEdgefactor = clamp(1.0 - (dCoords.x + dCoords.y), 0.0, 1.0);

    float ReflectionMultiplier = pow(Metallic, reflectionSpecularFalloffExponent) * 
                screenEdgefactor * 
                -reflected.z;
 
    // Get color
    vec3 SSR = mix(     textureLod(gFinalImage, coords.xy, 0).rgb*clamp(ReflectionMultiplier, 0.0, 1.0), 
                        texture(gDepth, TexCoords).gba * pow(Metallic, reflectionSpecularFalloffExponent), 
                        clamp(1.0-(screenEdgefactor * -reflected.z), 0.0, 1.0) * Fresnel);  

    outColor = vec4(SSR, 1.0);
}

vec3 PositionFromDepth(float depth) {
    float z = depth * 2.0 - 1.0;

    vec4 clipSpacePosition = vec4(TexCoords * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = invprojection * clipSpacePosition;

    // Perspective division
    viewSpacePosition /= viewSpacePosition.w;

    return viewSpacePosition.xyz;
}

vec3 BinarySearch(inout vec3 dir, inout vec3 hitCoord, inout float dDepth)
{
    float depth;

    vec4 projectedCoord;
 
    for(int i = 0; i < numBinarySearchSteps; i++)
    {

        projectedCoord = projection * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;
 
        depth = textureLod(gPosition, projectedCoord.xy, 2).x;
        //depth = PositionFromDepth(textureLod(gDepth, projectedCoord.xy, 3.0).x).z;
 
        dDepth = hitCoord.z - depth;

        dir *= 0.5;

        hitCoord += (dDepth > 0.0) ? dir : -dir;
    }

        projectedCoord = projection * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;
 
    return vec3(projectedCoord.xy, depth);
}

vec4 RayCast(vec3 dir, inout vec3 hitCoord, out float dDepth)
{

    dir *= rayStep;
 
 
    float depth;
    int steps;
    vec4 projectedCoord;

 
    for(int i = 0; i < maxSteps; i++)
    {
        hitCoord += dir;
 
        projectedCoord = projection * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;
 
        depth = textureLod(gPosition, projectedCoord.xy, 2).x;
        //depth = PositionFromDepth(textureLod(gDepth, projectedCoord.xy, 3.0).x).z;

        if(depth > 1000.0){
            continue;
        }
 
        dDepth = hitCoord.z - depth;

        if((dir.z - dDepth) < 0.95){
            if(dDepth <= 0.0){   
                vec4 Result;
                Result = vec4(BinarySearch(dir, hitCoord, dDepth), 1.0);

                return Result;
            }
        }
        
        steps++;
    }
 
    
    return vec4(projectedCoord.xy, depth, 0.0);
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}


vec3 hash(vec3 a)
{
    a = fract(a * Scale);
    a += dot(a, a.yxz + K);
    return fract((a.xxy + a.yxx)*a.zyx);
}