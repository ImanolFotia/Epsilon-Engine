#version 330 core

uniform sampler2D gFinalImage;
uniform sampler2D gPositionDepth;
uniform sampler2D gNormal;
uniform sampler2D gColor;

noperspective in vec2 TexCoords;

out vec4 outColor;


uniform mat4 projection;
uniform vec2 Resolution;
uniform vec2 Resolution2;
// Consts should help improve performance
/*
const float rayStep = 0.05;
const float minRayStep = 0.1;
const float maxSteps = 50;
const float searchDist = 5;
const float searchDistInv = 0.2;
const int numBinarySearchSteps = 5;
const float maxDDepth = 1.0;
const float maxDDepthInv = 1.0;
 */

const float rayStep = 0.10;
const float minRayStep = 0.1;
const float maxSteps = 30;
const float searchDist = 5;
const float searchDistInv = 0.2;
const int numBinarySearchSteps = 5;
const float maxDDepth = 1.0;
const float maxDDepthInv = 1.0;
 
const float reflectionSpecularFalloffExponent = 3.0;
float specular;
 
vec3 BinarySearch(inout vec3 dir, inout vec3 hitCoord, inout float dDepth)
{
    float depth;

        vec4 projectedCoord;
 
    for(int i = 0; i < numBinarySearchSteps; i++)
    {

    	projectedCoord = projection * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;
 
 
        depth = textureLod(gPositionDepth, projectedCoord.xy, 3).z;

 
        dDepth = hitCoord.z - depth;

        if(dDepth > 0.0)
            hitCoord += dir;
 
        dir *= 0.5;
        hitCoord -= dir;    
    }


    	projectedCoord = projection * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;
 
    return vec3(projectedCoord.xy, depth);
}
 
 
vec4 RayCast(vec3 dir, inout vec3 hitCoord, out float dDepth)
{

	if(specular*0.5 < 0.1)
		return vec4(0.0);


    dir *= rayStep;
 
 
    float depth;
    int steps;
 vec4 projectedCoord;
 
    for(int i = 0; i < maxSteps; i++)
    {
        hitCoord += dir;
 
        projectedCoord = projection * vec4(hitCoord, 1.0);
        projectedCoord.xy /= projectedCoord.w;
        projectedCoord.xy = projectedCoord.xy * 0.5 + 0.5;
 
 
        depth = textureLod(gPositionDepth, projectedCoord.xy, 4).z;
        if(depth > 1000.0)
        continue;
 
        dDepth = hitCoord.z - depth;

        if((dir.z - dDepth) < 1.5)
        if(dDepth <= 0.0)
        {	
        	vec4 asd;
            	asd = vec4(BinarySearch(dir, hitCoord, dDepth), 1.0);

        	//if(dir.z <= dDepth)
            	return asd;
        }
    	
        steps++;
    }
 
 	
    return vec4(BinarySearch(dir, hitCoord, dDepth), 1.0);
}

void main()
{

	vec2 gTexCoord = gl_FragCoord.xy/vec2(Resolution);
	//vec2 gTexCoord2 = gl_FragCoord.xy/vec2(Resolution2);
	//gTexCoord *= 2 - 1;
	//gTexCoord.x *= Resolution.x / Resolution.y;
 
 
    // Samples
    specular = texture(gColor, TexCoords).a;

    if(specular < 0.0)
    	discard;
 
    vec3 viewNormal = texture2D(gNormal, TexCoords).xyz;
    vec3 viewPos = textureLod(gPositionDepth, TexCoords, 3).xyz;

    // Reflection vector
    vec3 reflected = normalize(reflect(normalize(viewPos), normalize(viewNormal)));


    // Ray cast
    vec3 hitPos = viewPos;
    float dDepth;
 

 
    vec4 coords = RayCast((reflected * max(minRayStep, -viewPos.z)), hitPos, dDepth);
 
 
    vec2 dCoords = smoothstep(0.2, 0.6, abs(vec2(0.5, 0.5) - coords.xy));
 
 
    float screenEdgefactor = clamp(1.0 - (dCoords.x + dCoords.y), 0.0, 1.0);

    float asd = pow(specular, reflectionSpecularFalloffExponent) * 
    			screenEdgefactor * 
    			clamp(-reflected.z, 0.0, 1.0) * 
    			//clamp((searchDist - length(viewPos - hitPos)) * 
    			//searchDistInv, 0.5, 1.0) * 
    			1;
 
    // Get color
    vec3 SSR = texture(gFinalImage, coords.xy, 0).rgb * asd;  //specular * 0.5 * screenEdgefactor
    //vec3 SSR = vec3(screenSpaceReflection());
		outColor = vec4(SSR, 1.0f);
}