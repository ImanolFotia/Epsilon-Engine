#version 440 core

layout(location = 0) out vec3 gAlbedoSpec;
//layout(location = 1) out float gPosition;
layout(location = 1) out vec4 gExpensiveNormal;
layout(location = 2) out vec4 gDepth;
layout(location = 3) out vec4 gExtraComponents; 
layout(location = 4) out vec3 gLightAccumulation;

layout (binding = 0) uniform sampler2D texture_diffuse;
layout (binding = 1) uniform sampler2D texture_specular;
layout (binding = 2) uniform sampler2D texture_normal;
layout (binding = 3) uniform sampler2D texture_height;
layout (binding = 4) uniform samplerCube skybox;

in VS_OUT{
  vec3 FragPos;
  vec3 Normal;
  vec2 TexCoords;
  mat3 TBN;
  mat3 TBN2;
  vec3 wFragPos;
} fs_in;


uniform vec3 viewPos;
uniform float time;

uniform mat4 projection;

float NEAR = 0.1;
float FAR = 3000.0;
float LinearizeDepth(float depth)
{
    float z = depth * 2.0 - 1.0; // Back to NDC
    return ((2.0 * NEAR * FAR) / (FAR + NEAR - z * (FAR - NEAR)));
}

float deLinearizeDepth(float depth){
    float nonLinearDepth = (FAR + NEAR - 2.0 * NEAR * FAR / depth) / (FAR - NEAR);
    nonLinearDepth = (nonLinearDepth + 1.0) / 2.0;
    return nonLinearDepth;
}

in vec4 PrevPosition;
in vec4 Position;


const float Pi = 3.141592654f;
const float CosineA0 = Pi;
const float CosineA1 = (2.0f * Pi) / 3.0f;
const float CosineA2 = Pi * 0.25f;
// scale for restored amount of lighting
uniform float u_scaleFactor = 0.5;

struct SphericalHarmonicsFormat {
  vec3 u_L00; 
  vec3 u_L1m1;
  vec3 u_L10;
  vec3 u_L11;
  vec3 u_L2m2;
  vec3 u_L2m1;
  vec3 u_L20;
  vec3 u_L21;
  vec3 u_L22;
};

layout(std430, binding = 1) buffer AmbientLightSSBO
{
    //SphericalHarmonicsFormat ambientProbes[];

        vec3 u_L00; float padding0;
        vec3 u_L1m1; float padding1;
        vec3 u_L10; float padding2;
        vec3 u_L11; float padding3;
        vec3 u_L2m2; float padding4;
        vec3 u_L2m1; float padding5;
        vec3 u_L20; float padding6;
        vec3 u_L21; float padding7;
        vec3 u_L22; float padding8;

} lp;

const float C1 = 0.429043;
const float C2 = 0.511664;
const float C3 = 0.743125;
const float C4 = 0.886227;
const float C5 = 0.247708;

vec3 sphericalHarmonics(vec3 N)
{
   return
      // band 0, constant value, details of lowest frequency
      C4 * lp.u_L00 +

      // band 1, oriented along main axes
      2.0 * C2 * lp.u_L11 * N.x +
      2.0 * C2 * lp.u_L1m1 * N.y +
      2.0 * C2 * lp.u_L10 * N.z +

      // band 2, values depend on multiple axes, higher frequency details
      C1 * lp.u_L22 * (N.x * N.x - N.y * N.y) +
      C3 * lp.u_L20 * N.z * N.z - C5 * lp.u_L20 +
      2.0 * C1 * lp.u_L2m2 * N.x * N.y +
      2.0 * C1 * lp.u_L21 * N.x * N.z +
      2.0 * C1 * lp.u_L2m1 * N.y * N.z;
}

int numSteps = 0;
float currentLayerDepth = 0.0;
float weight = 0.0;
float layerDepth = 0.0;
vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
    // number of depth layers
    const float minLayers = 8;
    const float maxLayers = 32;
    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));  
    // calculate the size of each layer
    layerDepth = 1.0 / numLayers;
    // depth of current layer
    // the amount to shift the texture coordinates per layer (from vector P)
    vec2 P = viewDir.xy / viewDir.z * 0.08; 
    vec2 deltaTexCoords = P / numLayers;
  
    // get initial values
    vec2  currentTexCoords     = texCoords;
    float currentDepthMapValue = texture(texture_height, currentTexCoords).b;

    int maxSteps = 16;
      
    while(currentLayerDepth < currentDepthMapValue)
    {
        if(numSteps >= maxSteps)
          break;
        // shift texture coordinates along direction of P
        currentTexCoords -= deltaTexCoords;
        // get depthmap value at current texture coordinates
        currentDepthMapValue = texture(texture_height, currentTexCoords).b;  
        // get depth of next layer
        currentLayerDepth += layerDepth;  

        numSteps++;
    }
    
    // get texture coordinates before collision (reverse operations)
    vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

    // get depth after and before collision for linear interpolation
    float afterDepth  = currentDepthMapValue - currentLayerDepth;
    float beforeDepth = texture(texture_height, prevTexCoords).b - currentLayerDepth + layerDepth;
 
    // interpolation of texture coordinates
    weight = afterDepth / (afterDepth - beforeDepth);
    vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);

    return finalTexCoords;
}

vec3 bpcem (in vec3 v, vec3 Emax, vec3 Emin, vec3 Epos)
{ 
  vec3 nrdir = normalize(v);
  vec3 rbmax = (Emax - fs_in.wFragPos)/nrdir;
  vec3 rbmin = (Emin - fs_in.wFragPos)/nrdir;
  
  vec3 rbminmax;
  rbminmax.x = (nrdir.x>0.0)?rbmax.x:rbmin.x;
  rbminmax.y = (nrdir.y>0.0)?rbmax.y:rbmin.y;
  rbminmax.z = (nrdir.z>0.0)?rbmax.z:rbmin.z;   
  float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);
  vec3 posonbox = fs_in.wFragPos + nrdir * fa;
  return posonbox - Epos;
}

vec3 BoxMax = vec3(40, 32.8, 50);
vec3 BoxMin = vec3(-31,0.0,-27);

uniform ivec2 Resolution;
uniform bool isTransparent = false;

bool ScreenDoor[4][4];


void main()
{

  ScreenDoor[0][0] = true;
  ScreenDoor[1][0] = true;
  ScreenDoor[2][0] = true;
  ScreenDoor[3][0] = false;

  ScreenDoor[0][1] = false;
  ScreenDoor[1][1] = true;
  ScreenDoor[2][1] = false;
  ScreenDoor[3][1] = true;

  ScreenDoor[0][2] = true;
  ScreenDoor[1][2] = false;
  ScreenDoor[2][2] = true;
  ScreenDoor[3][2] = true;

  ScreenDoor[0][3] = false;
  ScreenDoor[1][3] = true;
  ScreenDoor[2][3] = false;
  ScreenDoor[3][3] = true;

  if(texture(texture_diffuse, fs_in.TexCoords).a < 0.9)
    discard;    
    vec3 Dir = normalize((fs_in.TBN * viewPos) - (fs_in.TBN * fs_in.wFragPos));

  
  ivec2 invFragCoord = ivec2(gl_FragCoord);///ivec2(fragCoord);  
    int indexX = int(mod(int(invFragCoord.x), 4)); 
    int indexY = int(mod(int(invFragCoord.y), 4));
    
  if(!ScreenDoor[indexX][indexY] && isTransparent)
    discard;

  vec2 texCoords;  
  if(texture(texture_height, fs_in.TexCoords).b > 0.0)
  texCoords = ParallaxMapping(fs_in.TexCoords, Dir);
  else
  texCoords = fs_in.TexCoords;

  int negator = ( int(gl_FrontFacing) * 2 - 1 );
  gExpensiveNormal.rgb = normalize( negator * normalize(texture(texture_normal, texCoords).rgb * 2.0 - 1.0) * fs_in.TBN);

  gExpensiveNormal.a = texture(texture_specular, texCoords).r;

  vec4 CubeMapcolor = vec4(0.0);
  vec3 R = vec3(0.0);
  gAlbedoSpec.rgb = texture(texture_diffuse,texCoords).rgb;
  
  float bias = max(0.01 * (1.0 - dot(gExpensiveNormal.rgb, Dir)), 0.5) * texture(texture_height, texCoords).b;
  //gDepth.r = gl_FragCoord.z;
  //gPosition = fs_in.FragPos.z;

  gExtraComponents.xy = texture(texture_height, texCoords).rg; 
  vec2 a = (Position.xy / Position.w) * 0.5 + 0.5;
  vec2 b = (PrevPosition.xy / PrevPosition.w) * 0.5 + 0.5;

  gExtraComponents.zw = vec2(0.0);

  CubeMapcolor = texture(skybox, bpcem(
                                      reflect(normalize(fs_in.wFragPos - viewPos), normalize(gExpensiveNormal.rgb)), 
                                      BoxMax, BoxMin, vec3(6, 8, -8)));

  vec3 shc = sphericalHarmonics(normalize(gExpensiveNormal.rgb)) * u_scaleFactor;
  gLightAccumulation = shc;
  gDepth = vec4(gl_FragCoord.z, CubeMapcolor.rgb);
}
