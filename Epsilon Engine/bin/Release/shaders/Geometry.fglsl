#version 430 core

layout(location = 0) out vec3 gAlbedoSpec;
layout(location = 1) out vec3 gPosition;
layout(location = 2) out vec4 gExpensiveNormal;
layout(location = 3) out float gDepth;
layout(location = 4) out vec4 gExtraComponents; 
layout(location = 5) out vec3 gLightAccumulation;

layout (binding = 0) uniform sampler2D texture_diffuse;
layout (binding = 1) uniform sampler2D texture_specular;
layout (binding = 2) uniform sampler2D texture_normal;
layout (binding = 3) uniform sampler2D texture_height;
layout (binding = 4) uniform samplerCube skybox;

in VS_OUT{
  vec3 FragPos;
  vec3 Normal;
  vec2 TexCoords;
  mat3 TBN;
  mat3 TBN2;
  vec3 wFragPos;
} fs_in;


uniform vec3 viewPos;
uniform float time;

float NEAR = 0.1;
float FAR = 3000.0;
float LinearizeDepth(float depth)
{
    float z = depth * 2.0 - 1.0; // Back to NDC
    return ((2.0 * NEAR * FAR) / (FAR + NEAR - z * (FAR - NEAR)));
}
in vec4 PrevPosition;
in vec4 Position;


const float Pi = 3.141592654f;
const float CosineA0 = Pi;
const float CosineA1 = (2.0f * Pi) / 3.0f;
const float CosineA2 = Pi * 0.25f;
// scale for restored amount of lighting
uniform float u_scaleFactor = 0.001;

// coefficients of spherical harmonics and possible values
vec3 u_L00 = vec3(2.18019, 1.70291, 1.2511);
vec3 u_L1m1 = vec3(-0.270175, -0.183452, 0.220139);
vec3 u_L10 = vec3(-5.07485e-008, 2.95473e-008, -1.27885e-008);
vec3 u_L11 = vec3(-5.19708e-008, 2.85869e-008, 2.09197e-009);
vec3 u_L2m2 = vec3(-6.61901e-009, -3.40227e-009, 3.20674e-009);
vec3 u_L2m1 = vec3(2.11412e-008, 3.18673e-009, 1.86529e-009);
vec3 u_L20 = vec3(0.207079, 0.00427602, -0.385601);
vec3 u_L21 = vec3(-4.65641e-010, 3.45593e-011, -3.174e-010);
vec3 u_L22 = vec3(0.358673, 0.00742685, -0.667871);


const float C1 = 0.429043;
const float C2 = 0.511664;
const float C3 = 0.743125;
const float C4 = 0.886227;
const float C5 = 0.247708;

vec3 sphericalHarmonics(vec3 N)
{
   return
      // band 0, constant value, details of lowest frequency
      C4 * u_L00 +

      // band 1, oriented along main axes
      2.0 * C2 * u_L11 * N.x +
      2.0 * C2 * u_L1m1 * N.y +
      2.0 * C2 * u_L10 * N.z +

      // band 2, values depend on multiple axes, higher frequency details
      C1 * u_L22 * (N.x * N.x - N.y * N.y) +
      C3 * u_L20 * N.z * N.z - C5 * u_L20 +
      2.0 * C1 * u_L2m2 * N.x * N.y +
      2.0 * C1 * u_L21 * N.x * N.z +
      2.0 * C1 * u_L2m1 * N.y * N.z;
}


void main()
{
  if(texture(texture_diffuse, fs_in.TexCoords).a < 0.3)
    discard;    

  vec3 normalTexture = (texture(texture_normal, fs_in.TexCoords).rgb * 2.0 - 1.0);
  gExpensiveNormal.rgb = normalize(normalTexture * fs_in.TBN);
  //vec4 decalTex = texture(texture_decal, fs_in.TexCoords + (vec2(viewPos.x - 225.0, viewPos.z-300.0)));

  //gAlbedoSpec.a = texture(texture_specular, fs_in.TexCoords).r;
  vec2 Metallic_Emmisive = texture(texture_height, fs_in.TexCoords).rg;
  gExpensiveNormal.a = texture(texture_specular, fs_in.TexCoords).r;

  vec4 CubeMapcolor = vec4(0.0);
  vec3 R = vec3(0.0);

  gAlbedoSpec.rgb = texture(texture_diffuse,fs_in.TexCoords).rgb;
  
  float Depth = LinearizeDepth(gl_FragCoord.z);
  gDepth = gl_FragCoord.z;
  gPosition = fs_in.FragPos;
  gExtraComponents.xy = Metallic_Emmisive.xy; //vec4(Metallic_Emmisive, 1.0, 1.0);

  vec2 a = (Position.xy / Position.w) * 0.5 + 0.5;
  vec2 b = (PrevPosition.xy / PrevPosition.w) * 0.5 + 0.5;
  gExtraComponents.zw = (a - b);

  if( texture( skybox, vec3(0)).x > 0)
  {
    vec3 I = normalize(fs_in.wFragPos - viewPos);
    R = reflect(I, normalize(gExpensiveNormal.rgb));
    CubeMapcolor = texture(skybox, R);
  }
  //else
  //  CubeMapcolor = gAlbedoSpec.rgba * 0.0008;

  vec3 shc = sphericalHarmonics(gExpensiveNormal.rgb) * u_scaleFactor;
  //gLightAccumulation = max(CubeMapcolor.rgb * Metallic_Emmisive.r, vec3(0.0));
  gLightAccumulation = shc;
  //gWorldSpacePosition.rgb = fs_in.wFragPos;
  //gWorldSpacePosition.a = gl_FragCoord.z;
}
