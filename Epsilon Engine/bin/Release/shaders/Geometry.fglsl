#version 430 core

layout(location = 0) out vec3 gAlbedoSpec;
layout(location = 1) out float gPosition;
layout(location = 2) out vec4 gExpensiveNormal;
layout(location = 3) out vec4 gDepth;
layout(location = 4) out vec4 gExtraComponents; 
layout(location = 5) out vec3 gLightAccumulation;

layout (binding = 0) uniform sampler2D texture_diffuse;
layout (binding = 1) uniform sampler2D texture_specular;
layout (binding = 2) uniform sampler2D texture_normal;
layout (binding = 3) uniform sampler2D texture_height;
layout (binding = 4) uniform samplerCube skybox;

in VS_OUT{
  vec3 FragPos;
  vec3 Normal;
  vec2 TexCoords;
  mat3 TBN;
  mat3 TBN2;
  vec3 wFragPos;
} fs_in;


uniform vec3 viewPos;
uniform float time;

float NEAR = 0.1;
float FAR = 3000.0;
float LinearizeDepth(float depth)
{
    float z = depth * 2.0 - 1.0; // Back to NDC
    return ((2.0 * NEAR * FAR) / (FAR + NEAR - z * (FAR - NEAR)));
}
in vec4 PrevPosition;
in vec4 Position;


const float Pi = 3.141592654f;
const float CosineA0 = Pi;
const float CosineA1 = (2.0f * Pi) / 3.0f;
const float CosineA2 = Pi * 0.25f;
// scale for restored amount of lighting
uniform float u_scaleFactor = 13.0;

// coefficients of spherical harmonics and possible values
vec3 u_L00 = vec3(0.000583486, 0.000571206, 0.00103499);
vec3 u_L1m1 = vec3(0.000285382, 0.000283877, 0.000577816);
vec3 u_L10 = vec3(-6.56216e-006, -6.49363e-006, -1.13807e-005);
vec3 u_L11 = vec3(-4.21726e-005, -4.90659e-005, -9.87656e-005);
vec3 u_L2m2 = vec3(-0.000108929, -0.000115347, -0.000255311);
vec3 u_L2m1 = vec3(-6.82438e-007, -5.38153e-007, 1.84106e-007);
vec3 u_L20 = vec3(-5.45785e-005, -5.16044e-005, -0.00011851);
vec3 u_L21 = vec3(-4.20471e-006, -3.81651e-006, -7.40711e-006);
vec3 u_L22 = vec3(-7.63505e-005, -7.64585e-005, -0.000186511);

const float C1 = 0.429043;
const float C2 = 0.511664;
const float C3 = 0.743125;
const float C4 = 0.886227;
const float C5 = 0.247708;

vec3 sphericalHarmonics(vec3 N)
{
   return
      // band 0, constant value, details of lowest frequency
      C4 * u_L00 +

      // band 1, oriented along main axes
      2.0 * C2 * u_L11 * N.x +
      2.0 * C2 * u_L1m1 * N.y +
      2.0 * C2 * u_L10 * N.z +

      // band 2, values depend on multiple axes, higher frequency details
      C1 * u_L22 * (N.x * N.x - N.y * N.y) +
      C3 * u_L20 * N.z * N.z - C5 * u_L20 +
      2.0 * C1 * u_L2m2 * N.x * N.y +
      2.0 * C1 * u_L21 * N.x * N.z +
      2.0 * C1 * u_L2m1 * N.y * N.z;
}

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir)
{ 
    // number of depth layers
    const float minLayers = 8;
    const float maxLayers = 32;
    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));  
    // calculate the size of each layer
    float layerDepth = 1.0 / numLayers;
    // depth of current layer
    float currentLayerDepth = 0.0;
    // the amount to shift the texture coordinates per layer (from vector P)
    vec2 P = viewDir.xy / viewDir.z * 0.08; 
    vec2 deltaTexCoords = P / numLayers;
  
    // get initial values
    vec2  currentTexCoords     = texCoords;
    float currentDepthMapValue = texture(texture_height, currentTexCoords).b;

    int maxSteps = 16;
    int numSteps = 0;
      
    while(currentLayerDepth < currentDepthMapValue)
    {
        if(numSteps >= maxSteps)
          break;
        // shift texture coordinates along direction of P
        currentTexCoords -= deltaTexCoords;
        // get depthmap value at current texture coordinates
        currentDepthMapValue = texture(texture_height, currentTexCoords).b;  
        // get depth of next layer
        currentLayerDepth += layerDepth;  

        numSteps++;
    }
    
    // get texture coordinates before collision (reverse operations)
    vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

    // get depth after and before collision for linear interpolation
    float afterDepth  = currentDepthMapValue - currentLayerDepth;
    float beforeDepth = texture(texture_height, prevTexCoords).b - currentLayerDepth + layerDepth;
 
    // interpolation of texture coordinates
    float weight = afterDepth / (afterDepth - beforeDepth);
    vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);

    return finalTexCoords;
}

vec3 bpcem (in vec3 v, vec3 Emax, vec3 Emin, vec3 Epos)
{ 
  vec3 nrdir = normalize(v);
  vec3 rbmax = (Emax - fs_in.wFragPos)/nrdir;
  vec3 rbmin = (Emin - fs_in.wFragPos)/nrdir;
  
  vec3 rbminmax;
  rbminmax.x = (nrdir.x>0.0)?rbmax.x:rbmin.x;
  rbminmax.y = (nrdir.y>0.0)?rbmax.y:rbmin.y;
  rbminmax.z = (nrdir.z>0.0)?rbmax.z:rbmin.z;   
  float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);
  vec3 posonbox = fs_in.wFragPos + nrdir * fa;
  return posonbox - Epos;
}

vec3 BoxMax = vec3(35, 30, 27);
vec3 BoxMin = vec3(-39,0.8,-23);

void main()
{
  if(texture(texture_diffuse, fs_in.TexCoords).a < 0.9)
    discard;    
    vec3 Dir = normalize((fs_in.TBN * viewPos) - (fs_in.TBN * fs_in.wFragPos));

  vec2 texCoords;  
  if(texture(texture_height, fs_in.TexCoords).b > 0.0)
  texCoords = ParallaxMapping(fs_in.TexCoords, Dir);
  else
  texCoords = fs_in.TexCoords;

  vec3 normalTexture = normalize(texture(texture_normal, texCoords).rgb * 2.0 - 1.0);
  gExpensiveNormal.rgb = normalize(normalTexture * fs_in.TBN);
  //vec4 decalTex = texture(texture_decal, fs_in.TexCoords + (vec2(viewPos.x - 225.0, viewPos.z-300.0)));

  //gAlbedoSpec.a = texture(texture_specular, fs_in.TexCoords).r;
  vec2 Metallic_Emmisive = texture(texture_height, texCoords).rg;
  gExpensiveNormal.a = texture(texture_specular, texCoords).r;

  vec4 CubeMapcolor = vec4(0.0);
  vec3 R = vec3(0.0);
  gAlbedoSpec.rgb = vec3(0.0001);
  gAlbedoSpec.rgb += texture(texture_diffuse,texCoords).rgb;
  
  float Depth = LinearizeDepth(gl_FragCoord.z);
  gDepth.r = gl_FragCoord.z;
  gPosition = fs_in.FragPos.z;
  gExtraComponents.xy = Metallic_Emmisive.xy; //vec4(Metallic_Emmisive, 1.0, 1.0);

  vec2 a = (Position.xy / Position.w) * 0.5 + 0.5;
  vec2 b = (PrevPosition.xy / PrevPosition.w) * 0.5 + 0.5;
  gExtraComponents.zw = (a - b);

  //if( texture( skybox, vec3(0)).x > 0)
  //{
    vec3 I = normalize(fs_in.wFragPos - viewPos);
    R = reflect(I, normalize(gExpensiveNormal.rgb));
    CubeMapcolor = texture(skybox, bpcem(R, BoxMax, BoxMin, vec3(0, 8, 0)));
  //}

  //else
  //  CubeMapcolor = gAlbedoSpec.rgba * 0.0008;

  vec3 schDir = vec3(gExpensiveNormal.rgb.x, gExpensiveNormal.rgb.y, -gExpensiveNormal.rgb.z);
  schDir = bpcem(schDir, BoxMax, BoxMin, vec3(-6, 25, -1.5));
  //schDir = schDir.xzy;
  vec3 shc = sphericalHarmonics(normalize(gExpensiveNormal.rgb)) * u_scaleFactor;
  gLightAccumulation = shc;///max(CubeMapcolor.rgb * Metallic_Emmisive.r, vec3(0.0));
  gDepth.gba = CubeMapcolor.rgb;
  //gLightAccumulation = shc;
  //gWorldSpacePosition.rgb = fs_in.wFragPos;
  //gWorldSpacePosition.a = gl_FragCoord.z;
}
