#version 430 core

layout(location = 0) out vec4 gAlbedoSpec;
layout(location = 1) out vec4 gNormal;
layout(location = 2) out vec4 gPosition;
layout(location = 3) out vec3 gExpensiveNormal;
layout(location = 4) out vec3 gWorldSpacePosition;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;
in mat3 TBN;
in vec3 wFragPos;

layout (binding = 0) uniform sampler2D texture_diffuse;
layout (binding = 1) uniform sampler2D texture_specular;
layout (binding = 2) uniform sampler2D texture_normal;
layout (binding = 3) uniform sampler2D texture_height;
layout (binding = 4) uniform samplerCube skybox;

uniform int clip_Direction;
uniform bool BelowWater;
uniform float plane;
uniform vec3 viewPos;

float NEAR = 0.1;
float FAR = 3000.0;

float LinearizeDepth(float depth)
{
    float z = depth * 2.0 - 1.0; // Back to NDC
    return ((2.0 * NEAR * FAR) / (FAR + NEAR - z * (FAR - NEAR)));
}


void main()
{
      
      if(texture(texture_diffuse, TexCoords).a < 0.3)
            discard;    


  gExpensiveNormal = normalize((texture(texture_normal, TexCoords).rgb * 2.0 - 1.0) * TBN);

  gAlbedoSpec.a = texture(texture_specular, TexCoords).r;
  vec3 metallic = texture(texture_height, TexCoords).rgb;

    vec4 CubeMapcolor = vec4(0.0);
    vec3 R = vec3(0.0);
    if( texture( skybox, vec3(0)).x > 0){
    vec3 I = normalize(wFragPos - viewPos);
    R = reflect(I, normalize(gExpensiveNormal));
    CubeMapcolor = textureLod(skybox, R, 5.0);
    gAlbedoSpec.rgb = mix(CubeMapcolor.rgb, texture(texture_diffuse, TexCoords).rgb, clamp(metallic, 0.85, 1.0) );
  }
  else{
  gAlbedoSpec.rgb = texture(texture_diffuse, TexCoords).rgb;
}
  gNormal.rgb = normalize(Normal);
  gNormal.a = gl_FragCoord.z;
  gPosition.rgb = FragPos;
  float Depth = LinearizeDepth(gl_FragCoord.z);
  gPosition.a = Depth;
  gWorldSpacePosition.rgb = wFragPos;
}
