#version 440 core

layout(location = 0) out vec4 FragColor;

#define Scale vec3(0.3, 0.1, 0.1)
#define K 19.19

in vec3 FragPos;

uniform float time;
vec3 LightDirection = vec3(0,1,0);

const vec3 Blue = normalize(vec3(29,91,186));
const vec3 Cian = normalize(vec3(31, 184, 138));
const vec3 Orange = normalize(vec3(224,115,36));
const vec3 Gray = normalize(vec3(0.01,0.01,0.01));
const vec3 Black = normalize(vec3(0.0,0.0,0.0));

const float lowerlimit = 0.0;
const float upperlimit = 0.07;

vec3 hash(vec3 p3)
{
	p3 = fract(p3 * Scale);
    p3 += dot(p3, p3.yxz+19.19);
    return fract((p3.xxy + p3.yxx)*p3.zyx);

}

vec3 noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
	
    return mix(mix(mix( hash(p+vec3(0,0,0)), 
                        hash(p+vec3(1,0,0)),f.x),
                   mix( hash(p+vec3(0,1,0)), 
                        hash(p+vec3(1,1,0)),f.x),f.y),
               mix(mix( hash(p+vec3(0,0,1)), 
                        hash(p+vec3(1,0,1)),f.x),
                   mix( hash(p+vec3(0,1,1)), 
                        hash(p+vec3(1,1,1)),f.x),f.y),f.z);
}

const mat3 m = mat3( 0.00,  0.80,  0.60,
                    -0.80,  0.36, -0.48,
                    -0.60, -0.48,  0.64 );
vec3 fbm(in vec3 q)
{
            vec3 f  = 0.5000*noise( q ); q = m*q*2.01;
            f += 0.2500*noise( q ); q = m*q*2.02;
            f += 0.1250*noise( q ); q = m*q*2.03;
            f += 0.0625*noise( q ); q = m*q*2.01; 
            f += 0.03125*noise( q ); q = m*q*2.01; 
            f += 0.015625*noise( q ); q = m*q*2.01; 
            f += 0.0078125*noise( q ); q = m*q*2.01; 
            f += 0.00390625*noise( q ); q = m*q*2.01;  
    return vec3(f);
}

float getAverage(in vec3 color)
{
	return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

vec3 Uncharted2Tonemap(vec3 x)
{
    float A = 0.15;
    float B = 0.50;
    float C = 0.10;
    float D = 0.20;
    float E = 0.02;
    float F = 0.30;
   return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}
    float W = 11.2;
const float gamma = 2.2;
const float contrast = 0.1;
const float exposure = 1.0;
vec3 HDR(vec3 image)
{
    float ExposureBias = 2.0f;
    image*= exposure;
   vec3 curr = Uncharted2Tonemap(ExposureBias*image);

   vec3 whiteScale = 1.0f/Uncharted2Tonemap(vec3(W));
   vec3 color = curr*whiteScale;
      
   vec3 result = pow(color,vec3(1.0/gamma));
   return (result.xyz - 0.5f) * (1.0 + contrast) + 0.5f;
}


void main()
{
	
	vec3 Clouds = fbm(vec3(FragPos.x*3.0+time*0.02, FragPos.y*8.0+time*0.02, FragPos.z*3.0+time*0.02));

	float scatteringFactor = clamp((FragPos.y - lowerlimit) / (upperlimit - lowerlimit), 0.0, 1.0);

	vec3 Background = mix(Cian, Blue, clamp(FragPos.y*5.0+0.15, 0.0, 1.0));

    vec3 SkyColor = mix(Orange, Background, scatteringFactor);

	vec3 TimeColor = mix(Gray, SkyColor, /*clamp(LightDirection.y, 0.0, 1.0)*/ 1.0);

	vec3 color = 1.3*mix(TimeColor, vec3(2.0), clamp(pow(Clouds.x, 2.0), 0.0, 1.0)) * 0.2 /** clamp(LightDirection.y, 0.1, 0.5)*/;

	FragColor.rgb = /*vec3(clamp((1-Clouds.x), 0.0, 1.0)*0.1);*/HDR(color.rgb);
    FragColor.a = 1.0;
}
