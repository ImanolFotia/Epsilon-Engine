.TH "Patch" 3 "Wed Mar 6 2019" "Version 1.0" "Epsilon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Patch \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPatch\fP (glm::vec3 position, float s, int w, int h, std::string texturePath)"
.br
.ti -1c
.RI "void \fBupdateVertexBuffers\fP (std::vector< \fBPhysics::PhysicObject::t_ClothVertex\fP >)"
.br
.ti -1c
.RI "void \fBgenerateGeometry\fP ()"
.br
.ti -1c
.RI "void \fBRender\fP (\fBShader\fP *inShader, glm::mat4 viewMatrix, glm::mat4 projectionMatrix)"
.br
.ti -1c
.RI "void \fBRender\fP (\fBShader\fP inShader, glm::mat4 viewMatrix, glm::mat4 projectionMatrix)"
.br
.ti -1c
.RI "void \fBRenderShadows\fP ()"
.br
.ti -1c
.RI "void \fBDestroy\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBsetupVertexBuffers\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::shared_ptr< \fBeTexture\fP > \fBmTexture\fP"
.br
.ti -1c
.RI "std::shared_ptr< \fBeTexture\fP > \fBmNormalTexture\fP"
.br
.ti -1c
.RI "std::vector< glm::vec3 > \fBmVertices\fP"
.br
.ti -1c
.RI "std::vector< glm::vec3 > \fBmNormals\fP"
.br
.ti -1c
.RI "std::vector< glm::vec2 > \fBmTexCoords\fP"
.br
.ti -1c
.RI "std::vector< unsigned int > \fBmIndices\fP"
.br
.ti -1c
.RI "glm::vec3 \fBmPosition\fP"
.br
.ti -1c
.RI "int \fBmWidth\fP"
.br
.ti -1c
.RI "int \fBmHeight\fP"
.br
.ti -1c
.RI "float \fBmScale\fP"
.br
.ti -1c
.RI "GLuint \fBVAO\fP"
.br
.ti -1c
.RI "GLuint \fBVBO\fP"
.br
.ti -1c
.RI "GLuint \fBNBO\fP"
.br
.ti -1c
.RI "GLuint \fBEBO\fP"
.br
.ti -1c
.RI "GLuint \fBUVBO\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 9 of file Patch\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Patch::Patch (glm::vec3 position, float s, int w, int h, std::string texturePath)"
Constructor taking parameters for scale, width and height of the patch, and the corresponding texture 
.PP
Definition at line 3 of file Patch\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void Patch::Destroy ()"
Destroy all current textures and buffers 
.PP
Definition at line 16 of file Patch\&.cpp\&.
.SS "void Patch::generateGeometry ()"
Function to generate patch geometry data 
.PP
Definition at line 106 of file Patch\&.cpp\&.
.SS "void Patch::Render (\fBShader\fP * inShader, glm::mat4 viewMatrix, glm::mat4 projectionMatrix)"
Render function 
.PP
Definition at line 26 of file Patch\&.cpp\&.
.SS "void Patch::Render (\fBShader\fP inShader, glm::mat4 viewMatrix, glm::mat4 projectionMatrix)"
Render function 
.PP
Definition at line 61 of file Patch\&.cpp\&.
.SS "void Patch::RenderShadows ()"
Render function 
.PP
Definition at line 52 of file Patch\&.cpp\&.
.SS "void Patch::setupVertexBuffers ()\fC [private]\fP"
Set up VAO And VBO for the patch VBO is configured as a streaming vertex buffer Create buffers/arrays
.PP
Load data into vertex buffers 
.PP
Definition at line 146 of file Patch\&.cpp\&.
.SS "void Patch::updateVertexBuffers (std::vector< \fBPhysics::PhysicObject::t_ClothVertex\fP > inVertices)"
In case the vertex attributes change (Cloth simulation, etc), this function will update them Takes an array of vertices as input 
.PP
Definition at line 84 of file Patch\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Epsilon Engine from the source code\&.
