.TH "PostProcess" 3 "Wed Mar 6 2019" "Version 1.0" "Epsilon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PostProcess \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBbeginOffScreenrendering\fP (void)"
.br
.ti -1c
.RI "void \fBendOffScreenRendering\fP (void)"
.br
.ti -1c
.RI "void \fBShowFrame\fP (glm::vec3, bool &hdr, std::shared_ptr< \fBCamera\fP > &cam, float exposure, std::unique_ptr< \fBShadowMap\fP > &)"
.br
.ti -1c
.RI "void \fBapplySSAO\fP (std::shared_ptr< \fBCamera\fP > &cam)"
.br
.ti -1c
.RI "void \fBShowPostProcessImage\fP (float exposure, GLuint, glm::vec3 \fBSun\fP, std::shared_ptr< \fBCamera\fP > &cam)"
.br
.ti -1c
.RI "GLuint \fBgetSceneTexture\fP ()"
.br
.ti -1c
.RI "void \fBDestroy\fP ()"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "GLuint \fBcolorBuffer\fP"
.br
.ti -1c
.RI "GLuint \fBdepthBuffer\fP"
.br
.ti -1c
.RI "std::shared_ptr< \fBFrameBuffer\fP< std::string > > \fBhdrFBO\fP"
.br
.ti -1c
.RI "std::shared_ptr< \fBFrameBuffer\fP< int > > \fBmCompositeImage\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBshader\fP"
.br
.ti -1c
.RI "std::shared_ptr< \fBFrameBuffer\fP< int > > \fBCopyTextureFBO\fP"
.br
.ti -1c
.RI "float \fBm_exposure\fP"
.br
.ti -1c
.RI "GLuint \fBgDepth\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBLoadOffscreensShaders\fP (void)"
.br
.ti -1c
.RI "void \fBSetupFramebuffer\fP (void)"
.br
.ti -1c
.RI "void \fBRenderQuad\fP (void)"
.br
.ti -1c
.RI "float \fBlerp\fP (float y1, float y2, float mu)"
.br
.ti -1c
.RI "void \fBSetupGBuffer\fP (void)"
.br
.ti -1c
.RI "void \fBsetupSSAO\fP (void)"
.br
.ti -1c
.RI "void \fBsetupSSR\fP (void)"
.br
.ti -1c
.RI "void \fBSSRPass\fP (std::shared_ptr< \fBCamera\fP > &cam)"
.br
.ti -1c
.RI "void \fBsetupDownSampledSSR\fP ()"
.br
.ti -1c
.RI "void \fBDownSampleSSR\fP (double)"
.br
.ti -1c
.RI "GLuint \fBblurImage\fP (GLuint Buffer, bool)"
.br
.ti -1c
.RI "void \fBSetupPingPongFBO\fP (void)"
.br
.ti -1c
.RI "void \fBSetupPingPongDOF\fP (void)"
.br
.ti -1c
.RI "GLfloat \fBapplyAutoAxposure\fP (GLuint Buffer)"
.br
.ti -1c
.RI "void \fBSetupMotionBlur\fP ()"
.br
.ti -1c
.RI "void \fBMotionBlur\fP (float)"
.br
.ti -1c
.RI "GLuint \fBblurSSR\fP (GLuint)"
.br
.ti -1c
.RI "void \fBsetupPingPongSSR\fP ()"
.br
.ti -1c
.RI "void \fBCompositeImage\fP (bool)"
.br
.ti -1c
.RI "GLuint \fBGetPixel\fP (GLuint)"
.br
.ti -1c
.RI "void \fBgenerateBRDF\fP ()"
.br
.ti -1c
.RI "void \fBsetupDenoise\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::vector< \fBt_light\fP > \fBm_Lights\fP"
.br
.ti -1c
.RI "GLuint \fBSSAOwidth\fP"
.br
.ti -1c
.RI "GLuint \fBSSAOheight\fP"
.br
.ti -1c
.RI "GLuint \fBMotionBlurBuffer\fP"
.br
.ti -1c
.RI "GLuint \fBMotionBlurFBO\fP"
.br
.ti -1c
.RI "GLuint \fBSSRFBO\fP"
.br
.ti -1c
.RI "GLuint \fBSSRTexture\fP"
.br
.ti -1c
.RI "GLuint \fBpingpongSSRFBO\fP [2]"
.br
.ti -1c
.RI "GLuint \fBpingpongSSRT\fP [2]"
.br
.ti -1c
.RI "GLuint \fBDownSamplerFBO\fP"
.br
.ti -1c
.RI "GLuint \fBDownSampledTexture\fP"
.br
.ti -1c
.RI "GLuint \fBSinglePixelColorBuffer\fP"
.br
.ti -1c
.RI "GLuint \fBgExtraComponents\fP"
.br
.ti -1c
.RI "bool \fBSSROn\fP"
.br
.ti -1c
.RI "bool \fBm_MotionBlur\fP"
.br
.ti -1c
.RI "bool \fBlightShafts\fP"
.br
.ti -1c
.RI "bool \fBmParallaxMapping\fP"
.br
.ti -1c
.RI "bool \fBmMotionBlurStrength\fP"
.br
.ti -1c
.RI "int \fBmHBAOQuality\fP"
.br
.ti -1c
.RI "bool \fBmChromaticAberration\fP"
.br
.ti -1c
.RI "bool \fBmBokehDOF\fP"
.br
.ti -1c
.RI "std::shared_ptr< \fBFrameBuffer\fP< int > > \fBBRDFFramebuffer\fP"
.br
.ti -1c
.RI "GLuint \fBssaoFBO\fP"
.br
.ti -1c
.RI "GLuint \fBssaoBlurFBO\fP"
.br
.ti -1c
.RI "GLuint \fBrboDepth\fP"
.br
.ti -1c
.RI "GLuint \fBrDepth\fP"
.br
.ti -1c
.RI "GLuint \fBquadVAO\fP = 0"
.br
.ti -1c
.RI "GLuint \fBquadVBO\fP"
.br
.ti -1c
.RI "GLuint \fBsampler\fP"
.br
.ti -1c
.RI "GLuint \fBintermediateFBO\fP"
.br
.ti -1c
.RI "GLuint \fBDepthTexture\fP"
.br
.ti -1c
.RI "GLuint \fBlowresFBO\fP"
.br
.ti -1c
.RI "float \fBlastDepth\fP"
.br
.ti -1c
.RI "GLuint \fBlowresTex\fP"
.br
.ti -1c
.RI "GLuint \fBpingpongFBO\fP [2]"
.br
.ti -1c
.RI "GLuint \fBpingpongColorbuffers\fP [2]"
.br
.ti -1c
.RI "GLuint \fBpingpongDOF\fP [2]"
.br
.ti -1c
.RI "GLuint \fBpingpongColorbuffersDOF\fP [2]"
.br
.ti -1c
.RI "GLuint \fBDOFBuffer\fP"
.br
.ti -1c
.RI "glm::vec3 \fBSun\fP"
.br
.ti -1c
.RI "std::vector< glm::vec3 > \fBssaoNoise\fP"
.br
.ti -1c
.RI "GLenum \fBattachment_type\fP"
.br
.ti -1c
.RI "int \fBwidth\fP"
.br
.ti -1c
.RI "int \fBheight\fP"
.br
.ti -1c
.RI "float \fBexposureTime\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBSSAO\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBblurSSAO\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBfinalImage\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBblurBloom\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBScreenSpaceReflectionShader\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBblurSSRShader\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBPassThroughShader\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBMotionBlurShader\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBCompositeShader\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBBRDFShader\fP"
.br
.ti -1c
.RI "std::unique_ptr< \fBShader\fP > \fBDenoiseShader\fP"
.br
.ti -1c
.RI "std::vector< glm::vec3 > \fBLightPositions\fP"
.br
.ti -1c
.RI "std::vector< glm::vec3 > \fBssaoKernel\fP"
.br
.RI "\fIG-Buffer texture samplers\&. \fP"
.ti -1c
.RI "GLuint \fBnoiseTexture\fP"
.br
.ti -1c
.RI "GLuint \fBDenoiseTexture\fP"
.br
.ti -1c
.RI "GLuint \fBDenoiseFBO\fP"
.br
.ti -1c
.RI "GLuint \fBbrightColorBuffer\fP"
.br
.ti -1c
.RI "GLuint \fBgBuffer\fP"
.br
.ti -1c
.RI "GLuint \fBgAlbedoSpec\fP"
.br
.ti -1c
.RI "GLuint \fBgPosition\fP"
.br
.ti -1c
.RI "GLuint \fBgNormal\fP"
.br
.ti -1c
.RI "GLuint \fBgLowResDepth\fP"
.br
.ti -1c
.RI "GLuint \fBgExpensiveNormal\fP"
.br
.ti -1c
.RI "GLuint \fBssaoColorBuffer\fP"
.br
.ti -1c
.RI "GLuint \fBssaoColorBufferBlur\fP"
.br
.ti -1c
.RI "GLuint \fBgWorldSpacePosition\fP"
.br
.ti -1c
.RI "GLuint \fBgLightAccumulation\fP"
.br
.ti -1c
.RI "GLuint \fBmLastFrametexture\fP"
.br
.ti -1c
.RI "GLuint \fBmBlurredSSR\fP"
.br
.ti -1c
.RI "GLuint \fBBRDF\fP = 0"
.br
.ti -1c
.RI "GLuint \fBssbo\fP = 0"
.br
.ti -1c
.RI "std::shared_ptr< \fBeTexture\fP > \fBlensColor\fP"
.br
.ti -1c
.RI "std::shared_ptr< \fBeTexture\fP > \fBlensDirt\fP"
.br
.ti -1c
.RI "std::shared_ptr< \fBeTexture\fP > \fBlensStar\fP"
.br
.ti -1c
.RI "glm::vec2 \fBFocalLen\fP"
.br
.ti -1c
.RI "glm::vec2 \fBInvFocalLen\fP"
.br
.ti -1c
.RI "glm::vec2 \fBUVToViewA\fP"
.br
.ti -1c
.RI "glm::vec2 \fBUVToViewB\fP"
.br
.ti -1c
.RI "glm::vec2 \fBLinMAD\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
========= Copyright Survtech, All rights reserved\&. ============//
.PP
Purpose: 
.PP
 
.PP
Definition at line 20 of file PostProcess\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "GLfloat PostProcess::applyAutoAxposure (GLuint Buffer)\fC [private]\fP"
gets the luminicense from a texture 
.PP
Definition at line 460 of file PostProcess\&.cpp\&.
.SS "void PostProcess::applySSAO (std::shared_ptr< \fBCamera\fP > & cam)"
Calculates the screen space ambient occlusion from the geometry 
.PP
Definition at line 339 of file PostProcess\&.cpp\&.
.SS "void PostProcess::beginOffScreenrendering (void)"
Attaches the off-screen rendering buffer 
.PP
Definition at line 199 of file PostProcess\&.cpp\&.
.SS "GLuint PostProcess::blurImage (GLuint Buffer, bool cheap = \fCfalse\fP)\fC [private]\fP"
Blurs and image using a Gaussian Blur shader 
.PP
Definition at line 426 of file PostProcess\&.cpp\&.
.SS "void PostProcess::endOffScreenRendering (void)"
Disattaches the off-screen rendering buffer 
.PP
Definition at line 208 of file PostProcess\&.cpp\&.
.SS "float PostProcess::lerp (float y1, float y2, float mu)\fC [private]\fP"
Lerp function to interpolate values 
.PP
Definition at line 1040 of file PostProcess\&.cpp\&.
.SS "void PostProcess::LoadOffscreensShaders (void)\fC [private]\fP"
loads the shaders used for render off-screen and post process affects 
.PP
Definition at line 184 of file PostProcess\&.cpp\&.
.SS "void PostProcess::RenderQuad (void)\fC [private]\fP"
Renders a quad that fills the screen 
.PP
Definition at line 1044 of file PostProcess\&.cpp\&.
.SS "void PostProcess::SetupFramebuffer (void)\fC [private]\fP"
Creates the framebuffer objects and attaches the proper textures 
.PP
Definition at line 19 of file PostProcess\&.cpp\&.
.SS "void PostProcess::SetupGBuffer (void)\fC [private]\fP"
Creates the GBuffer and attaches the proper textures 
.IP "\(bu" 2
Color + Specular color buffer
.IP "\(bu" 2
Normal color buffer
.IP "\(bu" 2
Create and attach depth buffer (renderbuffer) 
.PP

.PP
Definition at line 212 of file PostProcess\&.cpp\&.
.SS "void PostProcess::SetupPingPongDOF (void)\fC [private]\fP"
Set up buffers for blurring 
.PP
Definition at line 535 of file PostProcess\&.cpp\&.
.SS "void PostProcess::SetupPingPongFBO (void)\fC [private]\fP"
Set up buffers for blurring 
.PP
Definition at line 497 of file PostProcess\&.cpp\&.
.SS "void PostProcess::setupSSAO (void)\fC [private]\fP"
Creates the \fBSSAO\fP framebuffer and attaches the proper textures Also create framebuffer to hold \fBSSAO\fP processing stage
.PP
.IP "\(bu" 2
\fBSSAO\fP color buffer
.IP "\(bu" 2
and blur stage 
.PP

.PP
Definition at line 277 of file PostProcess\&.cpp\&.
.SS "void PostProcess::setupSSR (void)\fC [private]\fP"
Creates the SSR framebuffer and attaches the proper textures 
.PP
Definition at line 554 of file PostProcess\&.cpp\&.
.SS "void PostProcess::ShowFrame (glm::vec3 Sun, bool & hdr, std::shared_ptr< \fBCamera\fP > & cam, float exposure, std::unique_ptr< \fBShadowMap\fP > & shadowMap)"
Render the output from the G-Buffer copy texture
.PP
end copy texture 
.PP
Definition at line 944 of file PostProcess\&.cpp\&.
.SS "void PostProcess::ShowPostProcessImage (float exposure, GLuint onmenu, glm::vec3 Sun, std::shared_ptr< \fBCamera\fP > & cam)"
Render the post process image to the screen after the post-process effects has been applied 
.PP
Definition at line 869 of file PostProcess\&.cpp\&.
.SS "void PostProcess::SSRPass (std::shared_ptr< \fBCamera\fP > & cam)\fC [private]\fP"
SSR Denoise SSR 
.PP
Definition at line 640 of file PostProcess\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Epsilon Engine from the source code\&.
