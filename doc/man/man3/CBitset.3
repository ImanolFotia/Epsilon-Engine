.TH "CBitset" 3 "Wed Mar 6 2019" "Version 1.0" "Epsilon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CBitset \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBResize\fP (int count)"
.br
.ti -1c
.RI "void \fBSet\fP (int i)"
.br
.ti -1c
.RI "int \fBOn\fP (int i)"
.br
.ti -1c
.RI "void \fBClear\fP (int i)"
.br
.ti -1c
.RI "void \fBClearAll\fP ()"
.br
.ti -1c
.RI "\fBCBitset\fP ()"
.br
.RI "\fIInitialize all the data members\&. \fP"
.ti -1c
.RI "\fB~CBitset\fP ()"
.br
.RI "\fIThis is our deconstructor\&. \fP"
.ti -1c
.RI "void \fBResize\fP (int count)"
.br
.RI "\fIThis resizes our bitset to a size so each face has a bit associated with it\&. \fP"
.ti -1c
.RI "void \fBSet\fP (int i)"
.br
.RI "\fIThis does the binary math to set the desired bit\&. \fP"
.ti -1c
.RI "int \fBOn\fP (int i)"
.br
.RI "\fIThis returns if the desired bit slot is a 1 or a 0\&. \fP"
.ti -1c
.RI "void \fBClear\fP (int i)"
.br
.RI "\fIThis clears a bit to 0\&. \fP"
.ti -1c
.RI "void \fBClearAll\fP ()"
.br
.RI "\fIThis initializes the bits to 0\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned int * \fBm_bits\fP"
.br
.RI "\fIOur private bit data that holds the bits and size\&. \fP"
.ti -1c
.RI "int \fBm_size\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
========= Copyright Survtech, All rights reserved\&. ============//
.PP
Purpose: 
.PP
 
.PP
Definition at line 164 of file BSP\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CBitset::~CBitset ()\fC [inline]\fP"

.PP
This is our deconstructor\&. If we have valid memory, get rid of it 
.PP
Definition at line 25 of file CBitset\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CBitset::Resize (int count)\fC [inline]\fP"

.PP
This resizes our bitset to a size so each face has a bit associated with it\&. Get the size of integers we need
.PP
Make sure we haven't already allocated memory for the bits
.PP
Allocate the bits and initialize them 
.PP
Definition at line 36 of file CBitset\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Epsilon Engine from the source code\&.
