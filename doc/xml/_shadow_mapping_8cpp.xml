<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_shadow_mapping_8cpp" kind="file" language="C++">
    <compoundname>ShadowMapping.cpp</compoundname>
    <includes refid="_shadow_mapping_8h" local="no">ShadowMapping.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="1231">
        <label>ShadowMapping.h</label>
        <link refid="_shadow_mapping_8h_source"/>
        <childnode refid="1232" relation="include">
        </childnode>
        <childnode refid="1236" relation="include">
        </childnode>
        <childnode refid="1233" relation="include">
        </childnode>
        <childnode refid="1239" relation="include">
        </childnode>
        <childnode refid="1240" relation="include">
        </childnode>
      </node>
      <node id="1232">
        <label>Shader.h</label>
        <link refid="_shader_8h_source"/>
        <childnode refid="1233" relation="include">
        </childnode>
        <childnode refid="1234" relation="include">
        </childnode>
        <childnode refid="1235" relation="include">
        </childnode>
      </node>
      <node id="1241">
        <label>cmath</label>
      </node>
      <node id="1234">
        <label>string</label>
      </node>
      <node id="1233">
        <label>GL/glew.h</label>
      </node>
      <node id="1238">
        <label>btBulletCollisionCommon.h</label>
      </node>
      <node id="1236">
        <label>Types.h</label>
        <link refid="_types_8h_source"/>
        <childnode refid="1237" relation="include">
        </childnode>
        <childnode refid="1238" relation="include">
        </childnode>
      </node>
      <node id="1235">
        <label>iostream</label>
      </node>
      <node id="1240">
        <label>glm/gtc/matrix_transform.hpp</label>
      </node>
      <node id="1230">
        <label>D:/Epsilon/Epsilon Engine/src/ShadowMapping.cpp</label>
        <link refid="ShadowMapping.cpp"/>
        <childnode refid="1231" relation="include">
        </childnode>
        <childnode refid="1235" relation="include">
        </childnode>
        <childnode refid="1241" relation="include">
        </childnode>
      </node>
      <node id="1237">
        <label>btBulletDynamicsCommon.h</label>
      </node>
      <node id="1239">
        <label>glm/glm.hpp</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;ShadowMapping.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="class_shadow_map_1a4d4aa3ef5716aeeaee64d8431e432947" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_shadow_map_1a4d4aa3ef5716aeeaee64d8431e432947" kindref="member">ShadowMap::SetupShadowMap</ref>()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>glGenFramebuffers(1,<sp/>&amp;this-&gt;<ref refid="class_shadow_map_1aa8a296eaaa25b1ed280f0d5443b6cb82" kindref="member">m_ShadowFBO</ref>);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Create<sp/>depth<sp/>texture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>glGenTextures(1,<sp/>&amp;<ref refid="class_shadow_map_1aebb26b7e83be13b2e812d3d60e646e69" kindref="member">m_ShadowTexture</ref>);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/><ref refid="class_shadow_map_1aebb26b7e83be13b2e812d3d60e646e69" kindref="member">m_ShadowTexture</ref>);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexImage2D(GL_TEXTURE_2D,<sp/>0,<sp/>GL_DEPTH_COMPONENT16,<sp/>this-&gt;<ref refid="class_shadow_map_1a01106ae34d919ac828e9786da7a91215" kindref="member">m_SHADOW_WIDTH</ref>,<sp/>this-&gt;<ref refid="class_shadow_map_1aef84eb2ab2d1f970cfdcb155254d7645" kindref="member">m_SHADOW_HEIGHT</ref>,<sp/>0,<sp/>GL_DEPTH_COMPONENT,<sp/>GL_FLOAT,<sp/>NULL);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MIN_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MAG_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_WRAP_S,<sp/>GL_CLAMP_TO_BORDER);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_WRAP_T,<sp/>GL_CLAMP_TO_BORDER);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>GLfloat<sp/>borderColor[]<sp/>=<sp/>{<sp/>1.0,<sp/>1.0,<sp/>1.0,<sp/>1.0<sp/>};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameterfv(GL_TEXTURE_2D,<sp/>GL_TEXTURE_BORDER_COLOR,<sp/>borderColor);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindFramebuffer(GL_FRAMEBUFFER,<sp/>this-&gt;<ref refid="class_shadow_map_1aa8a296eaaa25b1ed280f0d5443b6cb82" kindref="member">m_ShadowFBO</ref>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>glFramebufferTexture2D(GL_FRAMEBUFFER,<sp/>GL_DEPTH_ATTACHMENT,<sp/>GL_TEXTURE_2D,<sp/><ref refid="class_shadow_map_1aebb26b7e83be13b2e812d3d60e646e69" kindref="member">m_ShadowTexture</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>glDrawBuffer(GL_NONE);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>glReadBuffer(GL_NONE);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glCheckFramebufferStatus(GL_FRAMEBUFFER)<sp/>!=<sp/>GL_FRAMEBUFFER_COMPLETE)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Framebuffer<sp/>not<sp/>complete!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindFramebuffer(GL_FRAMEBUFFER,<sp/>0);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>0);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="class_shadow_map_1acce822bf94608533989b77998eea48b6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_shadow_map_1acce822bf94608533989b77998eea48b6" kindref="member">ShadowMap::SetupShadowMatrices</ref>()</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lightProjection<sp/>=<sp/>glm::ortho(-65.0f,<sp/>65.0f,<sp/>-65.0f,<sp/>65.0f,<sp/>-20.0f,<sp/>80.0f);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//glm::perspective(glm::radians(90.0f),<sp/>16.0f<sp/>/<sp/>9.0f,<sp/>0.5f,<sp/>100.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//m_lightProjection<sp/>=<sp/>glm::perspective(glm::radians(45.0f),<sp/>16.0f<sp/>/<sp/>9.0f,<sp/>0.5f,<sp/>100.0f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lightView<sp/>=<sp/>glm::lookAt(this-&gt;<ref refid="class_shadow_map_1ac4dd84a1069dfb1d9d5e63fcf917947b" kindref="member">m_POSITION</ref>,<sp/>this-&gt;<ref refid="class_shadow_map_1ac4dd84a1069dfb1d9d5e63fcf917947b" kindref="member">m_POSITION</ref><sp/>-<sp/>this-&gt;<ref refid="class_shadow_map_1ad78382c5ab5ebc0de058081389ace23f" kindref="member">m_DIRECTION</ref>,<sp/>glm::vec3(1.0));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//m_lightView<sp/>=<sp/>glm::lookAt(this-&gt;m_POSITION,<sp/>this-&gt;m_POSITION<sp/>+<sp/>this-&gt;m_DIRECTION,<sp/>glm::vec3(1.0));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lightSpaceMatrix<sp/>=<sp/>m_lightProjection<sp/>*<sp/>m_lightView;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="42"><highlight class="comment">void<sp/>ShadowMap::SetupPingPongFBO()</highlight></codeline>
<codeline lineno="43"><highlight class="comment">{</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/>glGenFramebuffers(2,<sp/>pingpongFBO);</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/>glGenTextures(2,<sp/>pingpongDepthbuffers);</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(GLuint<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBindFramebuffer(GL_FRAMEBUFFER,<sp/>pingpongFBO[i]);</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>pingpongDepthbuffers[i]);</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glTexImage2D(GL_TEXTURE_2D,<sp/>0,<sp/>GL_RGB16F,<sp/>320,<sp/>240,<sp/>0,<sp/>GL_RGB,<sp/>GL_FLOAT,<sp/>NULL);</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MIN_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MAG_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_WRAP_S,<sp/>GL_CLAMP_TO_EDGE);<sp/>//<sp/>We<sp/>clamp<sp/>to<sp/>the<sp/>edge<sp/>as<sp/>the<sp/>blur<sp/>filter<sp/>would<sp/>otherwise<sp/>sample<sp/>repeated<sp/>texture<sp/>values!</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_WRAP_T,<sp/>GL_CLAMP_TO_EDGE);</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glFramebufferTexture2D(GL_FRAMEBUFFER,<sp/>GL_COLOR_ATTACHMENT0,<sp/>GL_TEXTURE_2D,<sp/>pingpongColorbuffers[i],<sp/>0);</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Also<sp/>check<sp/>if<sp/>framebuffers<sp/>are<sp/>complete<sp/>(no<sp/>need<sp/>for<sp/>depth<sp/>buffer)</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(glCheckFramebufferStatus(GL_FRAMEBUFFER)<sp/>!=<sp/>GL_FRAMEBUFFER_COMPLETE)</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Framebuffer<sp/>not<sp/>complete!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="comment">}</highlight></codeline>
<codeline lineno="61"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="63"><highlight class="comment">GLuint<sp/>ShadowMap::blurImage(GLuint<sp/>Buffer)</highlight></codeline>
<codeline lineno="64"><highlight class="comment">{</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/>GLboolean<sp/>horizontal<sp/>=<sp/>true,<sp/>first_iteration<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>GLuint<sp/>amount<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>blurShader-&gt;Use();</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/>for(int<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>amount<sp/>;<sp/>++i)</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBindFramebuffer(GL_FRAMEBUFFER,<sp/>pingpongFBO[horizontal]);</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glViewport(0,0,320,<sp/>240);</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform1i(glGetUniformLocation(blurShader-&gt;getProgramID(),<sp/>&quot;horizontal&quot;),<sp/>horizontal);</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>first_iteration<sp/>?<sp/>Buffer<sp/>:<sp/>pingpongColorbuffers[!horizontal]);<sp/><sp/>//<sp/>bind<sp/>texture<sp/>of<sp/>other<sp/>framebuffer<sp/>(or<sp/>scene<sp/>if<sp/>first<sp/>iteration)</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RenderQuad();</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>horizontal<sp/>=<sp/>!horizontal;</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(first_iteration)</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_iteration<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/>glBindFramebuffer(GL_FRAMEBUFFER,<sp/>0);</highlight></codeline>
<codeline lineno="83"><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/>glViewport(0,0,width,<sp/>height);</highlight></codeline>
<codeline lineno="85"><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>pingpongColorbuffers[horizontal];</highlight></codeline>
<codeline lineno="87"><highlight class="comment">}</highlight></codeline>
<codeline lineno="88"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="D:/Epsilon/Epsilon Engine/src/ShadowMapping.cpp"/>
  </compounddef>
</doxygen>
