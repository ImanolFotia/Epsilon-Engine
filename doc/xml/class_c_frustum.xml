<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_c_frustum" kind="class" language="C++" prot="public">
    <compoundname>CFrustum</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_c_frustum_1a2673b79facea7c41014cc9afdd7af138" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float CFrustum::m_Frustum[6][4]</definition>
        <argsstring>[6][4]</argsstring>
        <name>m_Frustum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Frustum.h" line="38" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Frustum.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_c_frustum_1a9c1738062b94376ab2b754bfd6b4c363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CFrustum::CalculateFrustum</definition>
        <argsstring>(glm::mat4 ProjectionMatrix, glm::mat4 ModelMatrix)</argsstring>
        <name>CalculateFrustum</name>
        <param>
          <type>glm::mat4</type>
          <declname>ProjectionMatrix</declname>
        </param>
        <param>
          <type>glm::mat4</type>
          <declname>ModelMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Normalize the BOTTOM side</para><para>This will extract the TOP side of the frustum</para><para>Normalize the TOP side</para><para>This will extract the BACK side of the frustum</para><para>Normalize the BACK side</para><para>Normalize the FRONT side </para>        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Frustum.h" line="12" column="1" bodyfile="D:/Epsilon/Epsilon Engine/src/Frustum.cpp" bodystart="67" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_c_frustum_1aff4dd14b8d2528621030756d21e37d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CFrustum::PointInFrustum</definition>
        <argsstring>(float x, float y, float z)</argsstring>
        <name>PointInFrustum</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The code below will allow us to make checks within the frustum. For example, if we want to see if a point, a sphere, or a cube lies inside of the frustum. Because all of our planes point INWARDS (The normals are all pointing inside the frustum) we then can assume that if a point is in FRONT of all of the planes, it&apos;s inside. </para>        </detaileddescription>
        <inbodydescription>
<para>Go through all the sides of the frustum</para><para>Calculate the plane equation and check if the point is behind a side of the frustum</para><para>The point was behind a side, so it ISN&apos;T in the frustum</para><para>The point was inside of the frustum (In front of ALL the sides of the frustum) </para>        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Frustum.h" line="15" column="1" bodyfile="D:/Epsilon/Epsilon Engine/src/Frustum.cpp" bodystart="189" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_c_frustum_1af05ef901019c29f46d145c6ebe6ea62c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CFrustum::SphereInFrustum</definition>
        <argsstring>(float x, float y, float z, float radius)</argsstring>
        <name>SphereInFrustum</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Go through all the sides of the frustum</para><para>If the center of the sphere is farther away from the plane than the radius</para><para>The distance was greater than the radius so the sphere is outside of the frustum </para>        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Frustum.h" line="18" column="1" bodyfile="D:/Epsilon/Epsilon Engine/src/Frustum.cpp" bodystart="213" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_c_frustum_1a02d4b3e95c33f9f83fc4104a3f5363e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CFrustum::CubeInFrustum</definition>
        <argsstring>(float x, float y, float z, float size)</argsstring>
        <name>CubeInFrustum</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Basically, what is going on is, that we are given the center of the cube, and half the length. Think of it like a radius. Then we checking each point in the cube and seeing if it is inside the frustum. If a point is found in front of a side, then we skip to the next side. If we get to a plane that does NOT have a point in front of it, then it will return false.</para><para><emphasis>Note</emphasis> - This will sometimes say that a cube is inside the frustum when it isn&apos;t. This happens when all the corners of the bounding box are not behind any one plane. This is rare and shouldn&apos;t effect the overall rendering speed.</para><para>If we get here, it isn&apos;t in the frustum </para>        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Frustum.h" line="21" column="1" bodyfile="D:/Epsilon/Epsilon Engine/src/Frustum.cpp" bodystart="236" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_c_frustum_1a06155e722ef85cce62f65d8667cf41fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CFrustum::BoxInFrustum</definition>
        <argsstring>(float x, float y, float z, float sizeX, float sizeY, float sizeZ)</argsstring>
        <name>BoxInFrustum</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sizeX</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sizeY</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sizeZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Go through all of the corners of the box and check then again each plane in the frustum. If all of them are behind one of the planes, then it most like is not in the frustum.</para><para>If we get here, it isn&apos;t in the frustum </para>        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Frustum.h" line="27" column="1" bodyfile="D:/Epsilon/Epsilon Engine/src/Frustum.cpp" bodystart="282" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_c_frustum_1a34e0f4eee50fa86ab4dfbdb2b1a78264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CFrustum::BoxInFrustum</definition>
        <argsstring>(MIN_MAX_POINTS points)</argsstring>
        <name>BoxInFrustum</name>
        <param>
          <type><ref refid="struct_m_i_n___m_a_x___p_o_i_n_t_s" kindref="compound">MIN_MAX_POINTS</ref></type>
          <declname>points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Go through all of the corners of the box and check then again each plane in the frustum. If all of them are behind one of the planes, then it most like is not in the frustum.</para><para>If we get here, it isn&apos;t in the frustum </para>        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Frustum.h" line="30" column="1" bodyfile="D:/Epsilon/Epsilon Engine/src/Frustum.cpp" bodystart="306" bodyend="327"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Epsilon/Epsilon Engine/include/Frustum.h" line="7" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Frustum.h" bodystart="7" bodyend="39"/>
    <listofallmembers>
      <member refid="class_c_frustum_1a06155e722ef85cce62f65d8667cf41fb" prot="public" virt="non-virtual"><scope>CFrustum</scope><name>BoxInFrustum</name></member>
      <member refid="class_c_frustum_1a34e0f4eee50fa86ab4dfbdb2b1a78264" prot="public" virt="non-virtual"><scope>CFrustum</scope><name>BoxInFrustum</name></member>
      <member refid="class_c_frustum_1a9c1738062b94376ab2b754bfd6b4c363" prot="public" virt="non-virtual"><scope>CFrustum</scope><name>CalculateFrustum</name></member>
      <member refid="class_c_frustum_1a02d4b3e95c33f9f83fc4104a3f5363e5" prot="public" virt="non-virtual"><scope>CFrustum</scope><name>CubeInFrustum</name></member>
      <member refid="class_c_frustum_1a2673b79facea7c41014cc9afdd7af138" prot="private" virt="non-virtual"><scope>CFrustum</scope><name>m_Frustum</name></member>
      <member refid="class_c_frustum_1aff4dd14b8d2528621030756d21e37d7f" prot="public" virt="non-virtual"><scope>CFrustum</scope><name>PointInFrustum</name></member>
      <member refid="class_c_frustum_1af05ef901019c29f46d145c6ebe6ea62c" prot="public" virt="non-virtual"><scope>CFrustum</scope><name>SphereInFrustum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
