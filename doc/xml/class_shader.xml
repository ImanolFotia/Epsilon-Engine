<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_shader" kind="class" language="C++" prot="public">
    <compoundname>Shader</compoundname>
    <includes refid="_shader_8h" local="no">Shader.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_shader_1ac9d689f1297575f02843c5d9a2204785" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint Shader::ProgramID</definition>
        <argsstring></argsstring>
        <name>ProgramID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Shader.h" line="30" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Shader.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_shader_1af55875685fc50833e40c84f9031e15af" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Shader::Path</definition>
        <argsstring></argsstring>
        <name>Path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Shader.h" line="31" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Shader.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_shader_1a06826fa137fa32fde05c3aca7605c6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Shader::Shader</definition>
        <argsstring>(const char *, const char *)</argsstring>
        <name>Shader</name>
        <param>
          <type>const char *</type>
          <defname>vertex</defname>
        </param>
        <param>
          <type>const char *</type>
          <defname>fragment</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>========= Copyright Survtech, All rights reserved. ============//</para><para>Purpose: <hruler/>
 </para>        </detaileddescription>
        <inbodydescription>
<para>Create the shaders</para><para>Read the <ref refid="struct_vertex" kindref="compound">Vertex</ref> <ref refid="class_shader" kindref="compound">Shader</ref> code from the file</para><para>Read the Fragment <ref refid="class_shader" kindref="compound">Shader</ref> code from the file</para><para>Compile <ref refid="struct_vertex" kindref="compound">Vertex</ref> <ref refid="class_shader" kindref="compound">Shader</ref></para><para>Check <ref refid="struct_vertex" kindref="compound">Vertex</ref> <ref refid="class_shader" kindref="compound">Shader</ref></para><para>Compile Fragment <ref refid="class_shader" kindref="compound">Shader</ref></para><para>Check Fragment <ref refid="class_shader" kindref="compound">Shader</ref></para><para>Link the program</para><para>Check the program </para>        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Shader.h" line="17" column="1" bodyfile="D:/Epsilon/Epsilon Engine/src/Shader.cpp" bodystart="14" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a9c8af69f062c455115d36d58d0c92c81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Shader::~Shader</definition>
        <argsstring>(void)</argsstring>
        <name>~Shader</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Shader.h" line="18" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Shader.h" bodystart="18" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a76c65e01a6f5f59d14913f296fcf6c8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::Use</definition>
        <argsstring>(void)</argsstring>
        <name>Use</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Shader.h" line="21" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Shader.h" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a7b33ded961be380cf6ab32bbe284b2f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::Free</definition>
        <argsstring>(void)</argsstring>
        <name>Free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Shader.h" line="23" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Shader.h" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a3be8bc123b4bc501887d268ae77e5dd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint Shader::getProgramID</definition>
        <argsstring>()</argsstring>
        <name>getProgramID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Shader.h" line="25" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Shader.h" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_shader_1a8c712f17cc553628f6e58299edca7483" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Shader::getPath</definition>
        <argsstring>()</argsstring>
        <name>getPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Shader.h" line="27" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Shader.h" bodystart="27" bodyend="27"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>========= Copyright Survtech, All rights reserved. ============//</para><para>Purpose: <hruler/>
 </para>    </detaileddescription>
    <location file="D:/Epsilon/Epsilon Engine/include/Shader.h" line="14" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Shader.h" bodystart="14" bodyend="32"/>
    <listofallmembers>
      <member refid="class_shader_1a7b33ded961be380cf6ab32bbe284b2f7" prot="public" virt="non-virtual"><scope>Shader</scope><name>Free</name></member>
      <member refid="class_shader_1a8c712f17cc553628f6e58299edca7483" prot="public" virt="non-virtual"><scope>Shader</scope><name>getPath</name></member>
      <member refid="class_shader_1a3be8bc123b4bc501887d268ae77e5dd6" prot="public" virt="non-virtual"><scope>Shader</scope><name>getProgramID</name></member>
      <member refid="class_shader_1af55875685fc50833e40c84f9031e15af" prot="private" virt="non-virtual"><scope>Shader</scope><name>Path</name></member>
      <member refid="class_shader_1ac9d689f1297575f02843c5d9a2204785" prot="private" virt="non-virtual"><scope>Shader</scope><name>ProgramID</name></member>
      <member refid="class_shader_1a06826fa137fa32fde05c3aca7605c6aa" prot="public" virt="non-virtual"><scope>Shader</scope><name>Shader</name></member>
      <member refid="class_shader_1a76c65e01a6f5f59d14913f296fcf6c8f" prot="public" virt="non-virtual"><scope>Shader</scope><name>Use</name></member>
      <member refid="class_shader_1a9c8af69f062c455115d36d58d0c92c81" prot="public" virt="virtual"><scope>Shader</scope><name>~Shader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
