<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_mesh" kind="class" language="C++" prot="public">
    <compoundname>Mesh</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_mesh_1ae065969fc6d4864eca63f57d14030a5d" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="structt___vertex" kindref="compound">t_Vertex</ref> &gt;</type>
        <definition>vector&lt;t_Vertex&gt; Mesh::vertices</definition>
        <argsstring></argsstring>
        <name>vertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_mesh" kindref="compound">Mesh</ref> Data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="50" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mesh_1a44fcd4d07b93cb0a57c7fa0d6ff8a8ba" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int Mesh::CubeMapIndex</definition>
        <argsstring></argsstring>
        <name>CubeMapIndex</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="51" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mesh_1a5853c81e7f7a948a75ca43d3e8747310" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="struct_vertex" kindref="compound">Vertex</ref> &gt;</type>
        <definition>vector&lt;Vertex&gt; Mesh::ivertices</definition>
        <argsstring></argsstring>
        <name>ivertices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="52" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mesh_1a233e40975b5ddafda502c8c31b77db2c" prot="public" static="no" mutable="no">
        <type>vector&lt; GLuint &gt;</type>
        <definition>vector&lt;GLuint&gt; Mesh::indices</definition>
        <argsstring></argsstring>
        <name>indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="53" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mesh_1a09bf4e8307bf7717c56501ca6293c6c0" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="struct_texture" kindref="compound">Texture</ref> &gt;</type>
        <definition>vector&lt;Texture&gt; Mesh::textures</definition>
        <argsstring></argsstring>
        <name>textures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="54" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_mesh_1a09b989b9d4df8ae595d7e80e091a4a5b" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint Mesh::VAO</definition>
        <argsstring></argsstring>
        <name>VAO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Render data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="96" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="96" bodyend="-1"/>
        <referencedby refid="class_mesh_1ac26f908078f6b9a7f3ac67b0bffff6a2" compoundref="_mesh_8cpp" startline="6" endline="50">Draw</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_mesh_1a0d28b2c6fee628a13f43cae3f858569b" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint Mesh::VBO</definition>
        <argsstring></argsstring>
        <name>VBO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="96" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_mesh_1a894c6723c0172f4e38b2509582abfa6c" prot="private" static="no" mutable="no">
        <type>GLuint</type>
        <definition>GLuint Mesh::EBO</definition>
        <argsstring></argsstring>
        <name>EBO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="96" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_mesh_1ab1367e4facd2cd7165d7800c0f5e8f1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Mesh::Mesh</definition>
        <argsstring>(vector&lt; t_Vertex &gt; vertices, vector&lt; GLuint &gt; indices, vector&lt; Texture &gt; textures, int CubeMapindex=1)</argsstring>
        <name>Mesh</name>
        <param>
          <type>vector&lt; <ref refid="structt___vertex" kindref="compound">t_Vertex</ref> &gt;</type>
          <declname>vertices</declname>
        </param>
        <param>
          <type>vector&lt; GLuint &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="struct_texture" kindref="compound">Texture</ref> &gt;</type>
          <declname>textures</declname>
        </param>
        <param>
          <type>int</type>
          <declname>CubeMapindex</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Functions </para>        </detaileddescription>
        <inbodydescription>
<para>cout &lt;&lt; &quot;number of textures for this mesh: &quot; &lt;&lt; textures.size() &lt;&lt; endl;</para><para>Now that we have all the required data, set the vertex buffers and its attribute pointers. </para>        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="58" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="58" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_mesh_1a5efe4da1a4c0971cfb037bd70304c303" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Mesh::~Mesh</definition>
        <argsstring>()</argsstring>
        <name>~Mesh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="70" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_mesh_1ac26f908078f6b9a7f3ac67b0bffff6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Mesh::Draw</definition>
        <argsstring>(Shader *&amp;shader, std::shared_ptr&lt; ResourceManager &gt; resm)</argsstring>
        <name>Draw</name>
        <param>
          <type><ref refid="class_shader" kindref="compound">Shader</ref> *&amp;</type>
          <declname>shader</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="class_resource_manager" kindref="compound">ResourceManager</ref> &gt;</type>
          <declname>resm</declname>
        </param>
        <briefdescription>
<para>Render the mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Draw mesh </para>        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="75" column="1" bodyfile="D:/Epsilon/Epsilon Engine/src/Mesh.cpp" bodystart="6" bodyend="50"/>
        <references refid="class_mesh_1a09b989b9d4df8ae595d7e80e091a4a5b" compoundref="_mesh_8h" startline="96">VAO</references>
      </memberdef>
      <memberdef kind="function" id="class_mesh_1a0709742dcefaa68370096791963bf055" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Mesh::DrawWithAlpha</definition>
        <argsstring>()</argsstring>
        <name>DrawWithAlpha</name>
        <briefdescription>
<para>Render the mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="78" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_mesh_1acdb1558a5dd6337ac2fa6df4db67cd84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Mesh::DrawNoTexture</definition>
        <argsstring>()</argsstring>
        <name>DrawNoTexture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="87" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="87" bodyend="92"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_mesh_1aafa4e21067a9b0c4407daf5e3c9ea991" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Mesh::setupMesh</definition>
        <argsstring>()</argsstring>
        <name>setupMesh</name>
        <briefdescription>
<para>Initializes all the buffer objects/arrays. </para>        </briefdescription>
        <detaileddescription>
<para>Functions </para>        </detaileddescription>
        <inbodydescription>
<para>Create buffers/arrays</para><para>Load data into vertex buffers</para><para>A great thing about structs is that their memory layout is sequential for all its items. The effect is that we can simply pass a pointer to the struct and it translates perfectly to a glm::vec3/2 array which again translates to 3/2 floats which translates to a byte array.</para><para>Set the vertex attribute pointers <ref refid="struct_vertex" kindref="compound">Vertex</ref> Positions</para><para><ref refid="struct_vertex" kindref="compound">Vertex</ref> <ref refid="struct_texture" kindref="compound">Texture</ref> Coords</para><para><ref refid="struct_vertex" kindref="compound">Vertex</ref> Normals</para><para><ref refid="struct_vertex" kindref="compound">Vertex</ref> Tangent</para><para><ref refid="struct_vertex" kindref="compound">Vertex</ref> Bitangent </para>        </inbodydescription>
        <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="100" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="100" bodyend="140"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Epsilon/Epsilon Engine/include/Mesh.h" line="47" column="1" bodyfile="D:/Epsilon/Epsilon Engine/include/Mesh.h" bodystart="46" bodyend="141"/>
    <listofallmembers>
      <member refid="class_mesh_1a44fcd4d07b93cb0a57c7fa0d6ff8a8ba" prot="public" virt="non-virtual"><scope>Mesh</scope><name>CubeMapIndex</name></member>
      <member refid="class_mesh_1ac26f908078f6b9a7f3ac67b0bffff6a2" prot="public" virt="non-virtual"><scope>Mesh</scope><name>Draw</name></member>
      <member refid="class_mesh_1acdb1558a5dd6337ac2fa6df4db67cd84" prot="public" virt="non-virtual"><scope>Mesh</scope><name>DrawNoTexture</name></member>
      <member refid="class_mesh_1a0709742dcefaa68370096791963bf055" prot="public" virt="non-virtual"><scope>Mesh</scope><name>DrawWithAlpha</name></member>
      <member refid="class_mesh_1a894c6723c0172f4e38b2509582abfa6c" prot="private" virt="non-virtual"><scope>Mesh</scope><name>EBO</name></member>
      <member refid="class_mesh_1a233e40975b5ddafda502c8c31b77db2c" prot="public" virt="non-virtual"><scope>Mesh</scope><name>indices</name></member>
      <member refid="class_mesh_1a5853c81e7f7a948a75ca43d3e8747310" prot="public" virt="non-virtual"><scope>Mesh</scope><name>ivertices</name></member>
      <member refid="class_mesh_1ab1367e4facd2cd7165d7800c0f5e8f1a" prot="public" virt="non-virtual"><scope>Mesh</scope><name>Mesh</name></member>
      <member refid="class_mesh_1aafa4e21067a9b0c4407daf5e3c9ea991" prot="private" virt="non-virtual"><scope>Mesh</scope><name>setupMesh</name></member>
      <member refid="class_mesh_1a09bf4e8307bf7717c56501ca6293c6c0" prot="public" virt="non-virtual"><scope>Mesh</scope><name>textures</name></member>
      <member refid="class_mesh_1a09b989b9d4df8ae595d7e80e091a4a5b" prot="private" virt="non-virtual"><scope>Mesh</scope><name>VAO</name></member>
      <member refid="class_mesh_1a0d28b2c6fee628a13f43cae3f858569b" prot="private" virt="non-virtual"><scope>Mesh</scope><name>VBO</name></member>
      <member refid="class_mesh_1ae065969fc6d4864eca63f57d14030a5d" prot="public" virt="non-virtual"><scope>Mesh</scope><name>vertices</name></member>
      <member refid="class_mesh_1a5efe4da1a4c0971cfb037bd70304c303" prot="public" virt="non-virtual"><scope>Mesh</scope><name>~Mesh</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
