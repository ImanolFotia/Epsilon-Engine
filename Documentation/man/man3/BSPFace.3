.TH "BSPFace" 3 "Wed Mar 6 2019" "Version 1.0" "Epsilon Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BSPFace \- 
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBt_Vertex\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBBuildFace\fP (std::vector< glm::vec3 > Vertices, std::vector< glm::vec3 > Normals, std::vector< glm::vec2 > TexCoords, std::vector< glm::vec2 > LMTexCoords, std::vector< unsigned int > Indices, int ID, string imagePath, \fBtBSPLightmap\fP LightMap, std::shared_ptr< \fBResourceManager\fP > Resm)"
.br
.ti -1c
.RI "void \fBRenderFace\fP (GLuint shader, GLuint TextureID, GLuint normalID, GLuint specularID, GLuint metallicID, bool)"
.br
.ti -1c
.RI "std::string \fBgetObjectID\fP ()"
.br
.in -1c
.SS "Data Fields"

.in +1c
.ti -1c
.RI "std::string \fBObjectID\fP"
.br
.ti -1c
.RI "int \fBfaceID\fP"
.br
.ti -1c
.RI "std::shared_ptr< btRigidBody > \fBrigidBody\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "bool \fBLoadLightMapTexture\fP ()"
.br
.ti -1c
.RI "bool \fBCalcTangentSpace\fP ()"
.br
.ti -1c
.RI "bool \fBprepareVAO\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::vector< \fBt_Vertex\fP > \fBmVertices\fP"
.br
.ti -1c
.RI "glm::vec3 \fBmPosition\fP"
.br
.ti -1c
.RI "GLuint \fBVAO\fP"
.br
.ti -1c
.RI "GLuint \fBtexture\fP"
.br
.ti -1c
.RI "string \fBimagePath\fP"
.br
.ti -1c
.RI "GLuint \fBVBO\fP"
.br
.ti -1c
.RI "GLuint \fBEBO\fP"
.br
.ti -1c
.RI "GLuint \fBGITexture\fP"
.br
.ti -1c
.RI "bool \fBGISet\fP = false"
.br
.ti -1c
.RI "\fBtBSPLightmap\fP \fBLightMap\fP"
.br
.ti -1c
.RI "GLuint \fBLightMaptexture\fP"
.br
.ti -1c
.RI "std::shared_ptr< \fBPhysics::PhysicObject\fP > \fBCollisionObject\fP"
.br
.ti -1c
.RI "std::shared_ptr< \fBResourceManager\fP > \fBresm\fP"
.br
.ti -1c
.RI "std::vector< glm::vec3 > \fBVertices\fP"
.br
.ti -1c
.RI "std::vector< glm::vec3 > \fBNormals\fP"
.br
.ti -1c
.RI "std::vector< glm::vec2 > \fBTexCoords\fP"
.br
.ti -1c
.RI "std::vector< glm::vec2 > \fBLMTexCoords\fP"
.br
.ti -1c
.RI "std::vector< glm::vec3 > \fBTangents\fP"
.br
.ti -1c
.RI "std::vector< glm::vec3 > \fBBitangents\fP"
.br
.ti -1c
.RI "std::vector< unsigned int > \fBIndices\fP"
.br
.ti -1c
.RI "std::shared_ptr< \fBPhysics::CollisionInfo\fP > \fBcollinfo\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 30 of file BSPFace\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool BSPFace::BuildFace (std::vector< glm::vec3 > Vertices, std::vector< glm::vec3 > Normals, std::vector< glm::vec2 > TexCoords, std::vector< glm::vec2 > LMTexCoords, std::vector< unsigned int > Indices, int ID, string imagePath, \fBtBSPLightmap\fP LightMap, std::shared_ptr< \fBResourceManager\fP > Resm)"
cout << 'Face #' << ID << endl; 
.PP
Definition at line 5 of file BSPFace\&.cpp\&.
.SS "bool BSPFace::CalcTangentSpace ()\fC [inline]\fP, \fC [private]\fP"
calculate tangent/bitangent vectors of both triangles
.PP
tangent1 = glm::normalize(tangent1);
.PP
bitangent1 = glm::normalize(bitangent1); 
.PP
Definition at line 93 of file BSPFace\&.h\&.
.SS "bool BSPFace::prepareVAO ()\fC [inline]\fP, \fC [private]\fP"
Load data into vertex buffers
.PP
A great thing about structs is that their memory layout is sequential for all its items\&. The effect is that we can simply pass a pointer to the struct and it translates perfectly to a glm::vec3/2 array which again translates to 3/2 floats which translates to a byte array\&.
.PP
Set the vertex attribute pointers \fBVertex\fP Positions
.PP
\fBVertex\fP \fBTexture\fP Coords
.PP
\fBVertex\fP Normals
.PP
\fBVertex\fP Tangent
.PP
\fBVertex\fP Bitangent 
.PP
Definition at line 135 of file BSPFace\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Epsilon Engine from the source code\&.
